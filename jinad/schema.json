{"openapi": "3.0.2", "info": {"title": "Jina Remote Manager", "description": "REST API for managing Jina on Remote", "version": "0.9.4"}, "paths": {"/v1/alive": {"get": {"summary": "Get status of jinad", "description": "Used to check if the api is running (returns 200 & jina version)", "operationId": "_status_v1_alive_get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}}}}, "/v1/flow/pods": {"put": {"tags": ["Remote Flow Manager"], "summary": "Build & start a Flow using Pods", "description": "Build a Flow using a list of `SinglePodModel`\n\n    [\n        {\n            \"name\": \"pod1\",\n            \"uses\": \"_pass\"\n        },\n        {\n            \"name\": \"pod2\",\n            \"uses\": \"_pass\",\n            \"host\": \"10.18.3.127\",\n            \"port_expose\": 8000\n        }\n    ]", "operationId": "_create_from_pods_v1_flow_pods_put", "requestBody": {"content": {"application/json": {"schema": {"title": "Pods", "type": "array", "items": {"type": "object"}, "example": {"log_config": "/opt/hostedtoolcache/Python/3.7.9/x64/lib/python3.7/site-packages/jina/resources/logging.default.yml", "identity": "72cb5f43-5337-11eb-aa06-000d3a13abbc", "log_id": "72cb5f44-5337-11eb-aa06-000d3a13abbc", "port_ctrl": 34293, "timeout_ctrl": 5000, "uses": "_pass", "port_in": 43839, "port_out": 45275, "host_in": "0.0.0.0", "host_out": "0.0.0.0", "socket_in": 0, "socket_out": 2, "max_socket_retries": 3, "dump_interval": 240, "memory_hwm": -1, "skip_on_error": 0, "num_part": 0, "uses_internal": "BaseExecutor", "host": "0.0.0.0", "port_expose": 51267, "runtime_backend": 1, "runtime_cls": "ZEDRuntime", "timeout_ready": 10000, "pea_id": -1, "pea_role": 0, "parallel": 1, "polling": 1, "scheduling": 0, "remote_access": 1, "remote_type": 1, "ctrl_with_ipc": false, "read_only": false, "separated_workspace": false, "pull_latest": false, "daemon": false, "expose_public": false, "show_exc_info": false}}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/v1/flow/yaml": {"put": {"tags": ["Remote Flow Manager"], "summary": "Build & start a Flow using YAML", "description": "Build a flow using [Flow YAML](https://docs.jina.ai/chapters/yaml/yaml.html#flow-yaml-sytanx)\n\n> Upload Flow yamlspec (`yamlspec`)\n\n> Yamls that Pods use (`uses_files`) (Optional)\n\n> Python modules (`pymodules_files`) that the Pods use (Optional)\n\n**yamlspec**:\n\n    !Flow\n    with:\n        rest_api: true\n        compress_hwm: 1024\n    pods:\n        encode:\n            uses: helloworld.encoder.yml\n            parallel: 2\n        index:\n            uses: helloworld.indexer.yml\n            shards: 2\n            separated_workspace: true\n\n**uses_files**: `helloworld.encoder.yml`\n\n    !MyEncoder\n    metas:\n        name: myenc\n        workspace: /tmp/blah\n        py_modules: components.py\n    requests:\n        on:\n            [IndexRequest, SearchRequest]:\n            - !Blob2PngURI {}\n            - !EncodeDriver {}\n            - !ExcludeQL\n            with:\n                fields:\n                    - buffer\n                    - chunks\n\n**uses_files**: `helloworld.indexer.yml`\n\n    !CompoundIndexer\n    components:\n    - !NumpyIndexer\n        with:\n            index_filename: vec.gz\n        metas:\n            name: vecidx\n            workspace: /tmp/blah\n    - !BinaryPbIndexer\n        with:\n            index_filename: chunk.gz\n        metas:\n            name: chunkidx\n            workspace: /tmp/blah\n    metas:\n        name: chunk_indexer\n        workspace: /tmp/blah\n\n**pymodules_files**: `components.py`\n\n    class MyEncoder(BaseImageEncoder):\n        def __init__(self):\n            ...", "operationId": "_create_from_yaml_v1_flow_yaml_put", "requestBody": {"content": {"multipart/form-data": {"schema": {"$ref": "#/components/schemas/Body__create_from_yaml_v1_flow_yaml_put"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/v1/flow/{flow_id}": {"get": {"tags": ["Remote Flow Manager"], "summary": "Get Flow information", "description": "Get Flow information using `flow_id`.\n\nFollowing details are sent:\n- Flow YAML\n- Gateway host\n- Gateway port", "operationId": "_fetch_v1_flow__flow_id__get", "parameters": [{"required": true, "schema": {"title": "Flow Id", "type": "string", "format": "uuid"}, "name": "flow_id", "in": "path"}, {"required": false, "schema": {"title": "Yaml Only", "type": "boolean", "default": false}, "name": "yaml_only", "in": "query"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/v1/ping": {"get": {"tags": ["Remote Flow Manager"], "summary": "Connect to Flow gateway", "description": "Ping to check if we can connect to gateway via gRPC `host:port`\n\nNote: Make sure Flow is running", "operationId": "_ping_v1_ping_get", "parameters": [{"required": true, "schema": {"title": "Host", "type": "string"}, "name": "host", "in": "query"}, {"required": true, "schema": {"title": "Port", "type": "integer"}, "name": "port", "in": "query"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/v1/flow": {"delete": {"tags": ["Remote Flow Manager"], "summary": "Close Flow Context", "description": "Close Flow Context", "operationId": "_delete_v1_flow_delete", "parameters": [{"required": true, "schema": {"title": "Flow Id", "type": "string", "format": "uuid"}, "name": "flow_id", "in": "query"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/v1/upload": {"put": {"tags": ["Remote Pod Manager"], "summary": "Upload pod context yamls & pymodules", "description": "    ", "operationId": "_upload_v1_upload_put", "requestBody": {"content": {"multipart/form-data": {"schema": {"$ref": "#/components/schemas/Body__upload_v1_upload_put"}}}}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/v1/pod": {"put": {"tags": ["Remote Pod Manager"], "summary": "Create a Pod via Flow or CLI", "description": "This is used to create a remote Pod which gets triggered either in a Flow context or via CLI\n\nArgs: pod_arguments (SinglePodModel or RemotePodModel)", "operationId": "_create_v1_pod_put", "requestBody": {"content": {"application/json": {"schema": {"title": "Pod Arguments", "anyOf": [{"$ref": "#/components/schemas/SinglePodModel"}, {"$ref": "#/components/schemas/ParallelPodModel"}]}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}, "delete": {"tags": ["Remote Pod Manager"], "summary": "Close Pod Context", "description": "Close Pod Context\n    ", "operationId": "_delete_v1_pod_delete", "parameters": [{"required": true, "schema": {"title": "Pod Id", "type": "string", "format": "uuid"}, "name": "pod_id", "in": "query"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/v1/pea/upload": {"put": {"tags": ["Remote Pea Manager"], "summary": "Upload pod context yamls & pymodules", "description": "    ", "operationId": "_upload_v1_pea_upload_put", "requestBody": {"content": {"multipart/form-data": {"schema": {"$ref": "#/components/schemas/Body__upload_v1_pea_upload_put"}}}}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/v1/pea": {"put": {"tags": ["Remote Pea Manager"], "summary": "Create a Pea", "description": "Used to create a Remote Pea", "operationId": "_create_v1_pea_put", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/PeaModel"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}, "delete": {"tags": ["Remote Pea Manager"], "summary": "Close Pea Context", "description": "Close Pea Context\n    ", "operationId": "_delete_v1_pea_delete", "parameters": [{"required": true, "schema": {"title": "Pea Id", "type": "string", "format": "uuid"}, "name": "pea_id", "in": "query"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}}, "components": {"schemas": {"Body__create_from_yaml_v1_flow_yaml_put": {"title": "Body__create_from_yaml_v1_flow_yaml_put", "required": ["yamlspec"], "type": "object", "properties": {"yamlspec": {"title": "Yamlspec", "type": "string", "format": "binary"}, "uses_files": {"title": "Uses Files", "type": "array", "items": {"type": "string", "format": "binary"}, "default": []}, "pymodules_files": {"title": "Pymodules Files", "type": "array", "items": {"type": "string", "format": "binary"}, "default": []}}}, "Body__upload_v1_pea_upload_put": {"title": "Body__upload_v1_pea_upload_put", "type": "object", "properties": {"uses_files": {"title": "Uses Files", "type": "array", "items": {"type": "string", "format": "binary"}, "default": []}, "pymodules_files": {"title": "Pymodules Files", "type": "array", "items": {"type": "string", "format": "binary"}, "default": []}}}, "Body__upload_v1_upload_put": {"title": "Body__upload_v1_upload_put", "type": "object", "properties": {"uses_files": {"title": "Uses Files", "type": "array", "items": {"type": "string", "format": "binary"}, "default": []}, "pymodules_files": {"title": "Pymodules Files", "type": "array", "items": {"type": "string", "format": "binary"}, "default": []}}}, "HTTPValidationError": {"title": "HTTPValidationError", "type": "object", "properties": {"detail": {"title": "Detail", "type": "array", "items": {"$ref": "#/components/schemas/ValidationError"}}}}, "ParallelPodModel": {"title": "ParallelPodModel", "type": "object", "properties": {"head": {"$ref": "#/components/schemas/SinglePodModel"}, "tail": {"$ref": "#/components/schemas/SinglePodModel"}, "peas": {"title": "Peas", "type": "array", "items": {"$ref": "#/components/schemas/SinglePodModel"}, "default": [{"log_config": "/opt/hostedtoolcache/Python/3.7.9/x64/lib/python3.7/site-packages/jina/resources/logging.default.yml", "identity": "72cb5f43-5337-11eb-aa06-000d3a13abbc", "log_id": "72cb5f44-5337-11eb-aa06-000d3a13abbc", "port_ctrl": 34293, "timeout_ctrl": 5000, "uses": "_pass", "port_in": 43839, "port_out": 45275, "host_in": "0.0.0.0", "host_out": "0.0.0.0", "socket_in": 0, "socket_out": 2, "max_socket_retries": 3, "dump_interval": 240, "memory_hwm": -1, "skip_on_error": 0, "num_part": 0, "uses_internal": "BaseExecutor", "host": "0.0.0.0", "port_expose": 51267, "runtime_backend": 1, "runtime_cls": "ZEDRuntime", "timeout_ready": 10000, "pea_id": -1, "pea_role": 0, "parallel": 1, "polling": 1, "scheduling": 0, "remote_access": 1, "remote_type": 1, "ctrl_with_ipc": false, "read_only": false, "separated_workspace": false, "pull_latest": false, "daemon": false, "expose_public": false, "show_exc_info": false}]}}}, "PeaModel": {"title": "PeaModel", "type": "object", "properties": {"name": {"title": "Name", "type": "string", "description": "the name of this Pea, used to identify the pea/pod and its logs."}, "log_config": {"title": "Log Config", "type": "string", "description": "the yaml config of the logger. note the executor inside will inherit this log config", "default": "/opt/hostedtoolcache/Python/3.7.9/x64/lib/python3.7/site-packages/jina/resources/logging.default.yml", "example": "/opt/hostedtoolcache/Python/3.7.9/x64/lib/python3.7/site-packages/jina/resources/logging.default.yml"}, "identity": {"title": "Identity", "type": "string", "description": "==SUPPRESS==", "default": "72cb5f41-5337-11eb-aa06-000d3a13abbc", "example": "72cb5f41-5337-11eb-aa06-000d3a13abbc"}, "log_id": {"title": "Log Id", "type": "string", "description": "==SUPPRESS==", "default": "72cb5f42-5337-11eb-aa06-000d3a13abbc", "example": "72cb5f42-5337-11eb-aa06-000d3a13abbc"}, "port_ctrl": {"title": "Port Ctrl", "type": "integer", "description": "port for controlling the runtime, default a random port between [49152, 65535]", "default": 47965, "example": 47965}, "timeout_ctrl": {"title": "Timeout Ctrl", "type": "integer", "description": "timeout (ms) of the control request, -1 for waiting forever", "default": 5000, "example": 5000}, "ssh_server": {"title": "Ssh Server", "type": "string", "description": "the SSH server through which the tunnel will be created, can actually be a fully specified \"user@server:port\" ssh url."}, "ssh_keyfile": {"title": "Ssh Keyfile", "type": "string", "description": "this specifies a key to be used in ssh login, default None. regular default ssh keys will be used without specifying this argument."}, "ssh_password": {"title": "Ssh Password", "type": "string", "description": "ssh password to the ssh server."}, "uses": {"title": "Uses", "type": "string", "description": "the config of the executor, it could be > a YAML file path, > an executor's class name, > a docker image (must start with docker://)> one of \"_pass\", \"_logforward\" > the raw content of YAML config (must starts with \"!\")", "default": "_pass", "example": "_pass"}, "py_modules": {"title": "Py Modules", "type": "string", "description": "the customized python modules need to be imported before loading the executor"}, "port_in": {"title": "Port In", "type": "integer", "description": "port for input data, default a random port between [49152, 65535]", "default": 42041, "example": 42041}, "port_out": {"title": "Port Out", "type": "integer", "description": "port for output data, default a random port between [49152, 65535]", "default": 34427, "example": 34427}, "host_in": {"title": "Host In", "type": "string", "description": "host address for input, by default it is 0.0.0.0", "default": "0.0.0.0", "example": "0.0.0.0"}, "host_out": {"title": "Host Out", "type": "string", "description": "host address for output, by default it is 0.0.0.0", "default": "0.0.0.0", "example": "0.0.0.0"}, "socket_in": {"title": "Socket In", "type": "integer", "description": "socket type for input port", "default": 0, "example": 0}, "socket_out": {"allOf": [{"$ref": "#/components/schemas/SocketType"}], "description": "socket type for output port", "default": 2, "example": 2}, "max_socket_retries": {"title": "Max Socket Retries", "type": "integer", "description": "max number of retries when socket is conflict", "default": 3, "example": 3}, "dump_interval": {"title": "Dump Interval", "type": "integer", "description": "serialize the model in the pod every n seconds if model changes. -1 means --read-only. ", "default": 240, "example": 240}, "memory_hwm": {"title": "Memory Hwm", "type": "integer", "description": "memory high watermark of this pod in Gigabytes, pod will restart when this is reached. -1 means no restriction", "default": -1, "example": -1}, "skip_on_error": {"title": "Skip On Error", "type": "integer", "description": "skip strategy on error message.", "default": 0, "example": 0}, "num_part": {"title": "Num Part", "type": "integer", "description": "==SUPPRESS==", "default": 0, "example": 0}, "uses_internal": {"title": "Uses Internal", "type": "string", "description": "The executor config that is passed to the docker image if a docker image is used in uses. It cannot be another docker image ", "default": "BaseExecutor", "example": "BaseExecutor"}, "entrypoint": {"title": "Entrypoint", "type": "string", "description": "the entrypoint command overrides the ENTRYPOINT in docker image. when not set then the docker image ENTRYPOINT takes effective."}, "volumes": {"title": "Volumes", "type": "string", "description": "the path on the host to be mounted inside the container. if separated by \":\" the first part will be considered as the local host path and the second part is the path in the container system. If no split provided, then the basename of that directory will be mounted into container's root path, e.g. --volumes=\"/user/test/my-workspace\" will be mounted into \"/my-workspace\" inside the container. all volumes are mounted with read-write mode."}, "host": {"title": "Host", "type": "string", "description": "host address of the runtime, by default it is 0.0.0.0.", "default": "0.0.0.0", "example": "0.0.0.0"}, "port_expose": {"title": "Port Expose", "type": "integer", "description": "host port exposed to the public", "default": 59379, "example": 59379}, "runtime_backend": {"allOf": [{"$ref": "#/components/schemas/RuntimeBackendType"}], "description": "the parallel backend of the runtime inside the pea", "default": 1, "example": 1}, "runtime_cls": {"title": "Runtime Cls", "type": "string", "description": "the runtime class to run inside the pea", "default": "ZEDRuntime", "example": "ZEDRuntime"}, "timeout_ready": {"title": "Timeout Ready", "type": "integer", "description": "timeout (ms) of a pea waits for the runtime to be ready, -1 for waiting forever", "default": 10000, "example": 10000}, "env": {"title": "Env", "type": "object", "description": "a map of environment variables that are available inside runtime"}, "pea_id": {"title": "Pea Id", "type": "integer", "description": "==SUPPRESS==", "default": -1, "example": -1}, "pea_role": {"title": "Pea Role", "type": "integer", "description": "==SUPPRESS==", "default": 0, "example": 0}, "ctrl_with_ipc": {"title": "Ctrl With Ipc", "type": "boolean", "description": "use ipc protocol for control socket", "default": false, "example": false}, "read_only": {"title": "Read Only", "type": "boolean", "description": "do not allow the pod to modify the model, dump_interval will be ignored", "default": false, "example": false}, "separated_workspace": {"title": "Separated Workspace", "type": "boolean", "description": "the data and config files are separated for each pea in this pod, only effective when BasePod's `parallel` > 1", "default": false, "example": false}, "pull_latest": {"title": "Pull Latest", "type": "boolean", "description": "pull the latest image before running", "default": false, "example": false}, "daemon": {"title": "Daemon", "type": "boolean", "description": "the Pea attempts to terminate all of its Runtime child processes/threads on existing. setting it to true basically tell the Pea do not wait on the Runtime when closing", "default": false, "example": false}, "expose_public": {"title": "Expose Public", "type": "boolean", "description": "expose the public IP address to remote when necessary, by default it exposesprivate IP address, which only allows accessing under the same network/subnet", "default": false, "example": false}, "show_exc_info": {"title": "Show Exc Info", "type": "boolean", "description": "if true then exception stack information to be added to the logging message, useful in debugging", "default": false, "example": false}}}, "PollingType": {"title": "PollingType", "enum": [1, 2, 3], "type": "integer", "description": "The enum for representing the parallel type of peas in a pod\n\n    "}, "RemoteAccessType": {"title": "RemoteAccessType", "enum": [0, 1], "type": "integer", "description": "Remote access type when connect to the host "}, "RemotePeapodType": {"title": "RemotePeapodType", "enum": [0, 1], "type": "integer", "description": "Remote access type when connect to the host "}, "RuntimeBackendType": {"title": "RuntimeBackendType", "enum": [0, 1], "type": "integer", "description": "An enumeration."}, "SinglePodModel": {"title": "SinglePodModel", "type": "object", "properties": {"name": {"title": "Name", "type": "string", "description": "the name of this Pea, used to identify the pea/pod and its logs."}, "log_config": {"title": "Log Config", "type": "string", "description": "the yaml config of the logger. note the executor inside will inherit this log config", "default": "/opt/hostedtoolcache/Python/3.7.9/x64/lib/python3.7/site-packages/jina/resources/logging.default.yml", "example": "/opt/hostedtoolcache/Python/3.7.9/x64/lib/python3.7/site-packages/jina/resources/logging.default.yml"}, "identity": {"title": "Identity", "type": "string", "description": "==SUPPRESS==", "default": "72cb5f43-5337-11eb-aa06-000d3a13abbc", "example": "72cb5f43-5337-11eb-aa06-000d3a13abbc"}, "log_id": {"title": "Log Id", "type": "string", "description": "==SUPPRESS==", "default": "72cb5f44-5337-11eb-aa06-000d3a13abbc", "example": "72cb5f44-5337-11eb-aa06-000d3a13abbc"}, "port_ctrl": {"title": "Port Ctrl", "type": "integer", "description": "port for controlling the runtime, default a random port between [49152, 65535]", "default": 34293, "example": 34293}, "timeout_ctrl": {"title": "Timeout Ctrl", "type": "integer", "description": "timeout (ms) of the control request, -1 for waiting forever", "default": 5000, "example": 5000}, "ssh_server": {"title": "Ssh Server", "type": "string", "description": "the SSH server through which the tunnel will be created, can actually be a fully specified \"user@server:port\" ssh url."}, "ssh_keyfile": {"title": "Ssh Keyfile", "type": "string", "description": "this specifies a key to be used in ssh login, default None. regular default ssh keys will be used without specifying this argument."}, "ssh_password": {"title": "Ssh Password", "type": "string", "description": "ssh password to the ssh server."}, "uses": {"title": "Uses", "type": "string", "description": "the config of the executor, it could be > a YAML file path, > an executor's class name, > a docker image (must start with docker://)> one of \"_pass\", \"_logforward\" > the raw content of YAML config (must starts with \"!\")", "default": "_pass", "example": "_pass"}, "py_modules": {"title": "Py Modules", "type": "string", "description": "the customized python modules need to be imported before loading the executor"}, "port_in": {"title": "Port In", "type": "integer", "description": "port for input data, default a random port between [49152, 65535]", "default": 43839, "example": 43839}, "port_out": {"title": "Port Out", "type": "integer", "description": "port for output data, default a random port between [49152, 65535]", "default": 45275, "example": 45275}, "host_in": {"title": "Host In", "type": "string", "description": "host address for input, by default it is 0.0.0.0", "default": "0.0.0.0", "example": "0.0.0.0"}, "host_out": {"title": "Host Out", "type": "string", "description": "host address for output, by default it is 0.0.0.0", "default": "0.0.0.0", "example": "0.0.0.0"}, "socket_in": {"title": "Socket In", "type": "integer", "description": "socket type for input port", "default": 0, "example": 0}, "socket_out": {"allOf": [{"$ref": "#/components/schemas/SocketType"}], "description": "socket type for output port", "default": 2, "example": 2}, "max_socket_retries": {"title": "Max Socket Retries", "type": "integer", "description": "max number of retries when socket is conflict", "default": 3, "example": 3}, "dump_interval": {"title": "Dump Interval", "type": "integer", "description": "serialize the model in the pod every n seconds if model changes. -1 means --read-only. ", "default": 240, "example": 240}, "memory_hwm": {"title": "Memory Hwm", "type": "integer", "description": "memory high watermark of this pod in Gigabytes, pod will restart when this is reached. -1 means no restriction", "default": -1, "example": -1}, "skip_on_error": {"title": "Skip On Error", "type": "integer", "description": "skip strategy on error message.", "default": 0, "example": 0}, "num_part": {"title": "Num Part", "type": "integer", "description": "==SUPPRESS==", "default": 0, "example": 0}, "uses_internal": {"title": "Uses Internal", "type": "string", "description": "The executor config that is passed to the docker image if a docker image is used in uses. It cannot be another docker image ", "default": "BaseExecutor", "example": "BaseExecutor"}, "entrypoint": {"title": "Entrypoint", "type": "string", "description": "the entrypoint command overrides the ENTRYPOINT in docker image. when not set then the docker image ENTRYPOINT takes effective."}, "volumes": {"title": "Volumes", "type": "string", "description": "the path on the host to be mounted inside the container. if separated by \":\" the first part will be considered as the local host path and the second part is the path in the container system. If no split provided, then the basename of that directory will be mounted into container's root path, e.g. --volumes=\"/user/test/my-workspace\" will be mounted into \"/my-workspace\" inside the container. all volumes are mounted with read-write mode."}, "host": {"title": "Host", "type": "string", "description": "host address of the runtime, by default it is 0.0.0.0.", "default": "0.0.0.0", "example": "0.0.0.0"}, "port_expose": {"title": "Port Expose", "type": "integer", "description": "host port exposed to the public", "default": 51267, "example": 51267}, "runtime_backend": {"allOf": [{"$ref": "#/components/schemas/RuntimeBackendType"}], "description": "the parallel backend of the runtime inside the pea", "default": 1, "example": 1}, "runtime_cls": {"title": "Runtime Cls", "type": "string", "description": "the runtime class to run inside the pea", "default": "ZEDRuntime", "example": "ZEDRuntime"}, "timeout_ready": {"title": "Timeout Ready", "type": "integer", "description": "timeout (ms) of a pea waits for the runtime to be ready, -1 for waiting forever", "default": 10000, "example": 10000}, "env": {"title": "Env", "type": "object", "description": "a map of environment variables that are available inside runtime"}, "pea_id": {"title": "Pea Id", "type": "integer", "description": "==SUPPRESS==", "default": -1, "example": -1}, "pea_role": {"title": "Pea Role", "type": "integer", "description": "==SUPPRESS==", "default": 0, "example": 0}, "uses_before": {"title": "Uses Before", "type": "string", "description": "the executor used before sending to all parallels, accepted type follows \"--uses\""}, "uses_after": {"title": "Uses After", "type": "string", "description": "the executor used after receiving from all parallels, accepted type follows \"--uses\""}, "parallel": {"title": "Parallel", "type": "integer", "description": "number of parallel peas in the pod running at the same time, `port_in` and `port_out` will be set to random, and routers will be added automatically when necessary", "default": 1, "example": 1}, "polling": {"allOf": [{"$ref": "#/components/schemas/PollingType"}], "description": "ANY: only one (whoever is idle) replica polls the message; ALL: all workers poll the message (like a broadcast)", "default": 1, "example": 1}, "scheduling": {"title": "Scheduling", "type": "integer", "description": "the strategy of scheduling workload among peas", "default": 0, "example": 0}, "remote_access": {"allOf": [{"$ref": "#/components/schemas/RemoteAccessType"}], "description": "the way of managing remote runtime", "default": 1, "example": 1}, "remote_type": {"allOf": [{"$ref": "#/components/schemas/RemotePeapodType"}], "description": "the way of managing remote runtime", "default": 1, "example": 1}, "pod_role": {"title": "Pod Role", "type": "integer", "description": "==SUPPRESS=="}, "ctrl_with_ipc": {"title": "Ctrl With Ipc", "type": "boolean", "description": "use ipc protocol for control socket", "default": false, "example": false}, "read_only": {"title": "Read Only", "type": "boolean", "description": "do not allow the pod to modify the model, dump_interval will be ignored", "default": false, "example": false}, "separated_workspace": {"title": "Separated Workspace", "type": "boolean", "description": "the data and config files are separated for each pea in this pod, only effective when BasePod's `parallel` > 1", "default": false, "example": false}, "pull_latest": {"title": "Pull Latest", "type": "boolean", "description": "pull the latest image before running", "default": false, "example": false}, "daemon": {"title": "Daemon", "type": "boolean", "description": "the Pea attempts to terminate all of its Runtime child processes/threads on existing. setting it to true basically tell the Pea do not wait on the Runtime when closing", "default": false, "example": false}, "expose_public": {"title": "Expose Public", "type": "boolean", "description": "expose the public IP address to remote when necessary, by default it exposesprivate IP address, which only allows accessing under the same network/subnet", "default": false, "example": false}, "show_exc_info": {"title": "Show Exc Info", "type": "boolean", "description": "if true then exception stack information to be added to the logging message, useful in debugging", "default": false, "example": false}}}, "SocketType": {"title": "SocketType", "enum": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], "type": "integer", "description": "Enums for representing the socket type in a pod "}, "ValidationError": {"title": "ValidationError", "required": ["loc", "msg", "type"], "type": "object", "properties": {"loc": {"title": "Location", "type": "array", "items": {"type": "string"}}, "msg": {"title": "Message", "type": "string"}, "type": {"title": "Error Type", "type": "string"}}}}}}