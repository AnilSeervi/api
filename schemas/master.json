{"$id": "https://api.jina.ai/schemas/1.0.5.json", "$schema": "http://json-schema.org/draft-07/schema#", "definitions": {"Jina::Drivers::AggregateMatches2DocRankDriver": {"additionalProperties": false, "description": "This Driver is intended to take a `document` with matches at a `given granularity > 0`, clear those matches and substitute\n    these matches by the documents at a lower granularity level.\n    Input-Output ::\n        Input:\n        document: {granularity: k}\n            |- matches: {granularity: k}\n\n        Output:\n        document: {granularity: k}\n            |- matches: {granularity: k-1} (Sorted according to Ranker Executor)\n\n    Imagine a case where we are querying a system with text documents chunked by sentences. When we query the system,\n    we use sentences (chunks) to query it. So at some point we will have:\n    `query sentence (documents of granularity 1):\n        matches: indexed sentences (documents of level depth 1)`\n    `\n    But in the output we want to have the full document that better matches the `sentence`.\n    `query sentence (documents of granularity 1):\n        matches: indexed full documents (documents of granularity 0).\n    `\n    Using this Driver before querying a Binary Index with full binary document data can be very useful to implement a search system.", "properties": {"jtype": {"const": "AggregateMatches2DocRankDriver", "description": "This Driver is intended to take a `document` with matches at a `given granularity > 0`, clear those matches and substitute", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"executor": {"default": null, "description": "the name of the sub-executor, only necessary when :class:`jina.executors.compound.CompoundExecutor` is used", "type": "string"}, "keep_source_matches_as_chunks": {"default": false, "description": "A flag to indicate if the driver must return the old matches of the query or its chunks", "type": "boolean"}, "method": {"default": null, "description": "the function name of the executor that the driver feeds to", "type": "string"}, "priority": {"default": 0, "type": "number"}, "traversal_paths": {"default": ["m"], "type": "array"}}, "type": "object"}}, "type": "object"}, "Jina::Drivers::All": {"items": {"oneOf": [{"$ref": "#/definitions/Jina::Drivers::BaseExecutableDriver"}, {"$ref": "#/definitions/Jina::Drivers::BaseRankDriver"}, {"$ref": "#/definitions/Jina::Drivers::Matches2DocRankDriver"}, {"$ref": "#/definitions/Jina::Drivers::BaseRecursiveDriver"}, {"$ref": "#/definitions/Jina::Drivers::Blob2PngURI"}, {"$ref": "#/definitions/Jina::Drivers::Buffer2URI"}, {"$ref": "#/definitions/Jina::Drivers::BufferImage2Blob"}, {"$ref": "#/definitions/Jina::Drivers::ConvertDriver"}, {"$ref": "#/definitions/Jina::Drivers::DataURI2Blob"}, {"$ref": "#/definitions/Jina::Drivers::Text2URI"}, {"$ref": "#/definitions/Jina::Drivers::URI2Blob"}, {"$ref": "#/definitions/Jina::Drivers::URI2Buffer"}, {"$ref": "#/definitions/Jina::Drivers::URI2DataURI"}, {"$ref": "#/definitions/Jina::Drivers::URI2Text"}, {"$ref": "#/definitions/Jina::Drivers::SliceQL"}, {"$ref": "#/definitions/Jina::Drivers::FilterQL"}, {"$ref": "#/definitions/Jina::Drivers::BaseCacheDriver"}, {"$ref": "#/definitions/Jina::Drivers::BaseIndexDriver"}, {"$ref": "#/definitions/Jina::Drivers::TaggingCacheDriver"}, {"$ref": "#/definitions/Jina::Drivers::AggregateMatches2DocRankDriver"}, {"$ref": "#/definitions/Jina::Drivers::BaseAggregateMatchesRankerDriver"}, {"$ref": "#/definitions/Jina::Drivers::Chunk2DocRankDriver"}, {"$ref": "#/definitions/Jina::Drivers::BaseLabelPredictDriver"}, {"$ref": "#/definitions/Jina::Drivers::BasePredictDriver"}, {"$ref": "#/definitions/Jina::Drivers::BinaryPredictDriver"}, {"$ref": "#/definitions/Jina::Drivers::MultiLabelPredictDriver"}, {"$ref": "#/definitions/Jina::Drivers::OneHotPredictDriver"}, {"$ref": "#/definitions/Jina::Drivers::Prediction2DocBlobDriver"}, {"$ref": "#/definitions/Jina::Drivers::SortQL"}, {"$ref": "#/definitions/Jina::Drivers::CraftDriver"}, {"$ref": "#/definitions/Jina::Drivers::ExcludeQL"}, {"$ref": "#/definitions/Jina::Drivers::ExcludeReqQL"}, {"$ref": "#/definitions/Jina::Drivers::SelectQL"}, {"$ref": "#/definitions/Jina::Drivers::SelectReqQL"}, {"$ref": "#/definitions/Jina::Drivers::BaseEncodeDriver"}, {"$ref": "#/definitions/Jina::Drivers::EncodeDriver"}, {"$ref": "#/definitions/Jina::Drivers::LegacyEncodeDriver"}, {"$ref": "#/definitions/Jina::Drivers::CollectEvaluationDriver"}, {"$ref": "#/definitions/Jina::Drivers::ConcatEmbedDriver"}, {"$ref": "#/definitions/Jina::Drivers::ReduceAllDriver"}, {"$ref": "#/definitions/Jina::Drivers::KVIndexDriver"}, {"$ref": "#/definitions/Jina::Drivers::VectorIndexDriver"}, {"$ref": "#/definitions/Jina::Drivers::ReverseQL"}, {"$ref": "#/definitions/Jina::Drivers::BaseControlDriver"}, {"$ref": "#/definitions/Jina::Drivers::BaseDriver"}, {"$ref": "#/definitions/Jina::Drivers::ControlReqDriver"}, {"$ref": "#/definitions/Jina::Drivers::ForwardDriver"}, {"$ref": "#/definitions/Jina::Drivers::LogInfoDriver"}, {"$ref": "#/definitions/Jina::Drivers::ReduceDriver"}, {"$ref": "#/definitions/Jina::Drivers::RouteDriver"}, {"$ref": "#/definitions/Jina::Drivers::WaitDriver"}, {"$ref": "#/definitions/Jina::Drivers::MultiModalDriver"}, {"$ref": "#/definitions/Jina::Drivers::BaseSearchDriver"}, {"$ref": "#/definitions/Jina::Drivers::KVSearchDriver"}, {"$ref": "#/definitions/Jina::Drivers::VectorFillDriver"}, {"$ref": "#/definitions/Jina::Drivers::VectorSearchDriver"}, {"$ref": "#/definitions/Jina::Drivers::BaseEvaluateDriver"}, {"$ref": "#/definitions/Jina::Drivers::FieldEvaluateDriver"}, {"$ref": "#/definitions/Jina::Drivers::LoadGroundTruthDriver"}, {"$ref": "#/definitions/Jina::Drivers::NDArrayEvaluateDriver"}, {"$ref": "#/definitions/Jina::Drivers::RankEvaluateDriver"}, {"$ref": "#/definitions/Jina::Drivers::TextEvaluateDriver"}, {"$ref": "#/definitions/Jina::Drivers::SegmentDriver"}, {"$ref": "#/definitions/Jina::Drivers::DeleteDriver"}]}, "minItems": 1, "type": "array"}, "Jina::Drivers::BaseAggregateMatchesRankerDriver": {"additionalProperties": false, "description": "Drivers inherited from this Driver focus on aggregating scores from `chunks` to its `parents`.", "properties": {"jtype": {"const": "BaseAggregateMatchesRankerDriver", "description": "Drivers inherited from this Driver focus on aggregating scores from `chunks` to its `parents`.", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"executor": {"default": null, "description": "the name of the sub-executor, only necessary when :class:`jina.executors.compound.CompoundExecutor` is used", "type": "string"}, "keep_source_matches_as_chunks": {"default": false, "description": "A flag to indicate if the driver must return the old matches of the query or its chunks", "type": "boolean"}, "method": {"default": null, "description": "the function name of the executor that the driver feeds to", "type": "string"}, "priority": {"default": 0, "type": "number"}, "traversal_paths": {"default": ["c", "r"], "description": "Describes the leaves of the document tree on which _apply_all are called", "type": "array"}}, "type": "object"}}, "type": "object"}, "Jina::Drivers::BaseCacheDriver": {"additionalProperties": false, "description": "A driver related to :class:`BaseCache`.\n\n    :param with_serialization: feed serialized Document to the CacheIndexer\n    :param *args: *args for super\n    :param **kwargs: **kwargs for super", "properties": {"jtype": {"const": "BaseCacheDriver", "description": "A driver related to :class:`BaseCache`.", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"executor": {"default": null, "description": "the name of the sub-executor, only necessary when :class:`jina.executors.compound.CompoundExecutor` is used", "type": "string"}, "method": {"default": null, "description": "the function name of the executor that the driver feeds to", "type": "string"}, "priority": {"default": 0, "type": "number"}, "traversal_paths": {"default": ["c", "r"], "description": "Describes the leaves of the document tree on which _apply_all are called", "type": "array"}, "with_serialization": {"default": false, "type": "boolean"}}, "type": "object"}}, "type": "object"}, "Jina::Drivers::BaseControlDriver": {"additionalProperties": false, "description": "Control driver does not have access to the executor and it\n    often works directly with protobuf layer instead Jina primitive types", "properties": {"jtype": {"const": "BaseControlDriver", "description": "Control driver does not have access to the executor and it", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"priority": {"default": 0, "type": "number"}}, "type": "object"}}, "type": "object"}, "Jina::Drivers::BaseDriver": {"additionalProperties": false, "description": "A :class:`BaseDriver` is a logic unit above the :class:`jina.peapods.runtimes.zmq.zed.ZEDRuntime`.\n    It reads the protobuf message, extracts/modifies the required information and then return\n    the message back to :class:`jina.peapods.runtimes.zmq.zed.ZEDRuntime`.\n\n    A :class:`BaseDriver` needs to be :attr:`attached` to a :class:`jina.peapods.runtimes.zmq.zed.ZEDRuntime` before\n    using. This is done by :func:`attach`. Note that a deserialized :class:`BaseDriver` from file is always unattached.\n\n    :param priority: the priority of its default arg values (hardcoded in Python). If the\n         received ``QueryLang`` has a higher priority, it will override the hardcoded value\n    :param *args: not used (kept to maintain interface)\n    :param **kwargs: not used (kept to maintain interface)", "properties": {"jtype": {"const": "BaseDriver", "description": "A :class:`BaseDriver` is a logic unit above the :class:`jina.peapods.runtimes.zmq.zed.ZEDRuntime`.", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"priority": {"default": 0, "type": "number"}}, "type": "object"}}, "type": "object"}, "Jina::Drivers::BaseEncodeDriver": {"additionalProperties": false, "description": "Drivers inherited from this Driver will bind :meth:`encode` by default", "properties": {"jtype": {"const": "BaseEncodeDriver", "description": "Drivers inherited from this Driver will bind :meth:`encode` by default", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"executor": {"default": null, "description": "the name of the sub-executor, only necessary when :class:`jina.executors.compound.CompoundExecutor` is used", "type": "string"}, "method": {"default": null, "description": "the function name of the executor that the driver feeds to", "type": "string"}, "priority": {"default": 0, "type": "number"}, "traversal_paths": {"default": ["c", "r"], "description": "Describes the leaves of the document tree on which _apply_all are called", "type": "array"}}, "type": "object"}}, "type": "object"}, "Jina::Drivers::BaseEvaluateDriver": {"additionalProperties": false, "description": "The Base Driver for evaluation operations.\n\n    .. warning::\n\n        When ``running_avg=True``, then the running mean is returned. So far at Jina 0.8.10,\n         there is no way to reset the running statistics. If you have a query Flow running multiple queries,\n         you may want to make sure the running statistics is meaningful across multiple runs.\n\n    :param executor: the name of the sub-executor, only necessary when :class:`jina.executors.compound.CompoundExecutor` is used\n    :param method: the function name of the executor that the driver feeds to\n    :param running_avg: always return running average instead of value of the current run\n    :param *args:\n    :param **kwargs:", "properties": {"jtype": {"const": "BaseEvaluateDriver", "description": "The Base Driver for evaluation operations.", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"executor": {"default": null, "description": "the name of the sub-executor, only necessary when :class:`jina.executors.compound.CompoundExecutor` is used", "type": "string"}, "method": {"default": null, "description": "the function name of the executor that the driver feeds to", "type": "string"}, "priority": {"default": 0, "type": "number"}, "running_avg": {"default": false, "type": "boolean"}, "traversal_paths": {"default": ["c", "r"], "description": "Describes the leaves of the document tree on which _apply_all are called", "type": "array"}}, "type": "object"}}, "type": "object"}, "Jina::Drivers::BaseExecutableDriver": {"additionalProperties": false, "description": "A :class:`BaseExecutableDriver` is an intermediate logic unit between the :class:`jina.peapods.runtimes.zmq.zed.ZEDRuntime` and :class:`jina.executors.BaseExecutor`\n    It reads the protobuf message, extracts/modifies the required information and then sends to the :class:`jina.executors.BaseExecutor`,\n    finally it returns the message back to :class:`jina.peapods.runtimes.zmq.zed.ZEDRuntime`.\n\n    A :class:`BaseExecutableDriver` needs to be :attr:`attached` to a :class:`jina.peapods.runtimes.zmq.zed.ZEDRuntime` and :class:`jina.executors.BaseExecutor` before using.\n    This is done by :func:`attach`. Note that a deserialized :class:`BaseDriver` from file is always unattached.", "properties": {"jtype": {"const": "BaseExecutableDriver", "description": "A :class:`BaseExecutableDriver` is an intermediate logic unit between the :class:`jina.peapods.runtimes.zmq.zed.ZEDRuntime` and :class:`jina.executors.BaseExecutor`", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"executor": {"default": null, "description": "the name of the sub-executor, only necessary when :class:`jina.executors.compound.CompoundExecutor` is used", "type": "string"}, "method": {"default": null, "description": "the function name of the executor that the driver feeds to", "type": "string"}, "priority": {"default": 0, "type": "number"}, "traversal_paths": {"default": ["c", "r"], "description": "Describes the leaves of the document tree on which _apply_all are called", "type": "array"}}, "type": "object"}}, "type": "object"}, "Jina::Drivers::BaseIndexDriver": {"additionalProperties": false, "description": "Drivers inherited from this Driver will bind :meth:`add` by default.", "properties": {"jtype": {"const": "BaseIndexDriver", "description": "Drivers inherited from this Driver will bind :meth:`add` by default.", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"executor": {"default": null, "description": "the name of the sub-executor, only necessary when :class:`jina.executors.compound.CompoundExecutor` is used", "type": "string"}, "method": {"default": null, "description": "the function name of the executor that the driver feeds to", "type": "string"}, "priority": {"default": 0, "type": "number"}, "traversal_paths": {"default": ["c", "r"], "description": "Describes the leaves of the document tree on which _apply_all are called", "type": "array"}}, "type": "object"}}, "type": "object"}, "Jina::Drivers::BaseLabelPredictDriver": {"additionalProperties": false, "description": "Base class of a Driver for label prediction.\n\n    :param output_tag: output label will be written to ``doc.tags``\n    :param *args: *args for super\n    :param **kwargs: **kwargs for super", "properties": {"jtype": {"const": "BaseLabelPredictDriver", "description": "Base class of a Driver for label prediction.", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"executor": {"default": null, "description": "the name of the sub-executor, only necessary when :class:`jina.executors.compound.CompoundExecutor` is used", "type": "string"}, "fields": {"default": "embedding"}, "method": {"default": null, "description": "the function name of the executor that the driver feeds to", "type": "string"}, "output_tag": {"default": "prediction", "type": "string"}, "priority": {"default": 0, "type": "number"}, "traversal_paths": {"default": ["c", "r"], "description": "Describes the leaves of the document tree on which _apply_all are called", "type": "array"}}, "type": "object"}}, "type": "object"}, "Jina::Drivers::BasePredictDriver": {"additionalProperties": false, "description": "Drivers inherited from :class:`BasePredictDriver` will bind :meth:`predict` by default\n\n    :param fields: name of fields to be used to predict tags, default \"embeddings\"\n    :param *args: *args for super\n    :param **kwargs: **kwargs for super", "properties": {"jtype": {"const": "BasePredictDriver", "description": "Drivers inherited from :class:`BasePredictDriver` will bind :meth:`predict` by default", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"executor": {"default": null, "description": "the name of the sub-executor, only necessary when :class:`jina.executors.compound.CompoundExecutor` is used", "type": "string"}, "fields": {"default": "embedding"}, "method": {"default": null, "description": "the function name of the executor that the driver feeds to", "type": "string"}, "priority": {"default": 0, "type": "number"}, "traversal_paths": {"default": ["c", "r"], "description": "Describes the leaves of the document tree on which _apply_all are called", "type": "array"}}, "type": "object"}}, "type": "object"}, "Jina::Drivers::BaseRankDriver": {"additionalProperties": false, "description": "Drivers inherited from this Driver will bind :meth:`rank` by default", "properties": {"jtype": {"const": "BaseRankDriver", "description": "Drivers inherited from this Driver will bind :meth:`rank` by default", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"executor": {"default": null, "description": "the name of the sub-executor, only necessary when :class:`jina.executors.compound.CompoundExecutor` is used", "type": "string"}, "method": {"default": null, "description": "the function name of the executor that the driver feeds to", "type": "string"}, "priority": {"default": 0, "type": "number"}, "traversal_paths": {"default": ["c", "r"], "description": "Describes the leaves of the document tree on which _apply_all are called", "type": "array"}}, "type": "object"}}, "type": "object"}, "Jina::Drivers::BaseRecursiveDriver": {"additionalProperties": false, "description": "A :class:`BaseRecursiveDriver` is an abstract Driver class containing information about the `traversal_paths`\n    that a `Driver` must apply its logic.\n    It is intended to be mixed in with either :class:`FastRecursiveMixin` or :class:`RecursiveMixin`", "properties": {"jtype": {"const": "BaseRecursiveDriver", "description": "A :class:`BaseRecursiveDriver` is an abstract Driver class containing information about the `traversal_paths`", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"priority": {"default": 0, "type": "number"}, "traversal_paths": {"default": ["c", "r"], "description": "Describes the leaves of the document tree on which _apply_all are called", "type": "array"}}, "type": "object"}}, "type": "object"}, "Jina::Drivers::BaseSearchDriver": {"additionalProperties": false, "description": "Drivers inherited from this Driver will bind :meth:`craft` by default", "properties": {"jtype": {"const": "BaseSearchDriver", "description": "Drivers inherited from this Driver will bind :meth:`craft` by default", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"executor": {"default": null, "description": "the name of the sub-executor, only necessary when :class:`jina.executors.compound.CompoundExecutor` is used", "type": "string"}, "method": {"default": null, "description": "the function name of the executor that the driver feeds to", "type": "string"}, "priority": {"default": 0, "type": "number"}, "traversal_paths": {"default": ["r", "c"], "type": "array"}}, "type": "object"}}, "type": "object"}, "Jina::Drivers::BinaryPredictDriver": {"additionalProperties": false, "description": "Converts binary prediction into string label.\n\n    This is often used with binary classifier.", "properties": {"jtype": {"const": "BinaryPredictDriver", "description": "Converts binary prediction into string label.", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"executor": {"default": null, "description": "the name of the sub-executor, only necessary when :class:`jina.executors.compound.CompoundExecutor` is used", "type": "string"}, "fields": {"default": "embedding"}, "method": {"default": null, "description": "the function name of the executor that the driver feeds to", "type": "string"}, "one_label": {"default": "yes", "description": "label when prediction is one", "type": "string"}, "output_tag": {"default": "prediction", "type": "string"}, "priority": {"default": 0, "type": "number"}, "traversal_paths": {"default": ["c", "r"], "description": "Describes the leaves of the document tree on which _apply_all are called", "type": "array"}, "zero_label": {"default": "no", "description": "label when prediction is zero", "type": "string"}}, "type": "object"}}, "type": "object"}, "Jina::Drivers::Blob2PngURI": {"additionalProperties": false, "description": "Driver to convert blob to URI", "properties": {"jtype": {"const": "Blob2PngURI", "description": "Driver to convert blob to URI", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"convert_fn": {"default": "convert_blob_to_uri", "type": "string"}, "priority": {"default": 0, "type": "number"}, "traversal_paths": {"default": ["c", "r"], "description": "Describes the leaves of the document tree on which _apply_all are called", "type": "array"}}, "type": "object"}}, "type": "object"}, "Jina::Drivers::Buffer2URI": {"additionalProperties": false, "description": "Driver to convert buffer to URI", "properties": {"jtype": {"const": "Buffer2URI", "description": "Driver to convert buffer to URI", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"convert_fn": {"default": null, "description": "the method name from `:class:`Document` to be applied", "type": "string"}, "priority": {"default": 0, "type": "number"}, "traversal_paths": {"default": ["c", "r"], "description": "Describes the leaves of the document tree on which _apply_all are called", "type": "array"}}, "type": "object"}}, "type": "object"}, "Jina::Drivers::BufferImage2Blob": {"additionalProperties": false, "description": "Driver to convert image buffer to blob", "properties": {"jtype": {"const": "BufferImage2Blob", "description": "Driver to convert image buffer to blob", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"convert_fn": {"default": "convert_buffer_image_to_blob", "type": "string"}, "priority": {"default": 0, "type": "number"}, "traversal_paths": {"default": ["c", "r"], "description": "Describes the leaves of the document tree on which _apply_all are called", "type": "array"}}, "type": "object"}}, "type": "object"}, "Jina::Drivers::Chunk2DocRankDriver": {"additionalProperties": false, "description": "Extract matches score from chunks and use the executor to compute the rank and assign the resulting matches to the\n    level above.\n\n    Input-Output ::\n        Input:\n        document: {granularity: k-1}\n                |- chunks: {granularity: k}\n                |    |- matches: {granularity: k}\n                |\n                |- chunks: {granularity: k}\n                    |- matches: {granularity: k}\n        Output:\n        document: {granularity: k-1}\n                |- chunks: {granularity: k}\n                |    |- matches: {granularity: k}\n                |\n                |- chunks: {granularity: k}\n                |    |- matches: {granularity: k}\n                |\n                |-matches: {granularity: k-1} (Ranked according to Ranker Executor)\n\n        .. note::\n            - It traverses on ``chunks`` not on ``matches``. This is because ranker needs context information\n            from ``matches`` for several ``chunks``", "properties": {"jtype": {"const": "Chunk2DocRankDriver", "description": "Extract matches score from chunks and use the executor to compute the rank and assign the resulting matches to the", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"executor": {"default": null, "description": "the name of the sub-executor, only necessary when :class:`jina.executors.compound.CompoundExecutor` is used", "type": "string"}, "keep_source_matches_as_chunks": {"default": false, "description": "A flag to indicate if the driver must return the old matches of the query or its chunks", "type": "boolean"}, "method": {"default": null, "description": "the function name of the executor that the driver feeds to", "type": "string"}, "priority": {"default": 0, "type": "number"}, "traversal_paths": {"default": ["c"], "type": "array"}}, "type": "object"}}, "type": "object"}, "Jina::Drivers::CollectEvaluationDriver": {"additionalProperties": false, "description": "Merge all evaluations into one, grouped by ``doc.id``", "properties": {"jtype": {"const": "CollectEvaluationDriver", "description": "Merge all evaluations into one, grouped by ``doc.id``", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"priority": {"default": 0, "type": "number"}, "traversal_paths": {"default": ["c"], "type": "array"}}, "type": "object"}}, "type": "object"}, "Jina::Drivers::ConcatEmbedDriver": {"additionalProperties": false, "description": "Concat all embeddings into one, grouped by ```doc.id```", "properties": {"jtype": {"const": "ConcatEmbedDriver", "description": "Concat all embeddings into one, grouped by ```doc.id```", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"priority": {"default": 0, "type": "number"}, "traversal_paths": {"default": ["c"], "type": "array"}}, "type": "object"}}, "type": "object"}, "Jina::Drivers::ControlReqDriver": {"additionalProperties": false, "description": "Handling the control request, by default it is installed for all :class:`jina.peapods.peas.BasePea`", "properties": {"jtype": {"const": "ControlReqDriver", "description": "Handling the control request, by default it is installed for all :class:`jina.peapods.peas.BasePea`", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"priority": {"default": 0, "type": "number"}}, "type": "object"}}, "type": "object"}, "Jina::Drivers::ConvertDriver": {"additionalProperties": false, "description": "Drivers that make sure that specific conversions are applied to the documents.\n\n    .. note::\n        The list of functions that can be applied can be found in `:class:`Document`", "properties": {"jtype": {"const": "ConvertDriver", "description": "Drivers that make sure that specific conversions are applied to the documents.", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"convert_fn": {"default": null, "description": "the method name from `:class:`Document` to be applied", "type": "string"}, "priority": {"default": 0, "type": "number"}, "traversal_paths": {"default": ["c", "r"], "description": "Describes the leaves of the document tree on which _apply_all are called", "type": "array"}}, "type": "object"}}, "type": "object"}, "Jina::Drivers::CraftDriver": {"additionalProperties": false, "description": "Drivers inherited from this Driver will bind :meth:`craft` by default", "properties": {"jtype": {"const": "CraftDriver", "description": "Drivers inherited from this Driver will bind :meth:`craft` by default", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"executor": {"default": null, "description": "the name of the sub-executor, only necessary when :class:`jina.executors.compound.CompoundExecutor` is used", "type": "string"}, "method": {"default": null, "description": "the function name of the executor that the driver feeds to", "type": "string"}, "priority": {"default": 0, "type": "number"}, "traversal_paths": {"default": ["c", "r"], "description": "Describes the leaves of the document tree on which _apply_all are called", "type": "array"}}, "type": "object"}}, "type": "object"}, "Jina::Drivers::DataURI2Blob": {"additionalProperties": false, "description": "Driver to convert Data URI to image blob", "properties": {"jtype": {"const": "DataURI2Blob", "description": "Driver to convert Data URI to image blob", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"convert_fn": {"default": "convert_data_uri_to_blob", "type": "string"}, "priority": {"default": 0, "type": "number"}, "traversal_paths": {"default": ["c", "r"], "description": "Describes the leaves of the document tree on which _apply_all are called", "type": "array"}}, "type": "object"}}, "type": "object"}, "Jina::Drivers::DeleteDriver": {"additionalProperties": false, "description": "Drivers inherited from this Driver will bind :meth:`delete` by default", "properties": {"jtype": {"const": "DeleteDriver", "description": "Drivers inherited from this Driver will bind :meth:`delete` by default", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"executor": {"default": null, "description": "the name of the sub-executor, only necessary when :class:`jina.executors.compound.CompoundExecutor` is used", "type": "string"}, "method": {"default": null, "description": "the function name of the executor that the driver feeds to", "type": "string"}, "priority": {"default": 0, "type": "number"}, "traversal_paths": {"default": ["c", "r"], "description": "Describes the leaves of the document tree on which _apply_all are called", "type": "array"}}, "type": "object"}}, "type": "object"}, "Jina::Drivers::EncodeDriver": {"additionalProperties": false, "description": "Extract the content from documents and call executor and do encoding", "properties": {"jtype": {"const": "EncodeDriver", "description": "Extract the content from documents and call executor and do encoding", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"executor": {"default": null, "type": "string"}, "method": {"default": "encode", "type": "string"}, "priority": {"default": 0, "type": "number"}, "traversal_paths": {"default": ["c", "r"], "description": "Describes the leaves of the document tree on which _apply_all are called", "type": "array"}}, "type": "object"}}, "type": "object"}, "Jina::Drivers::ExcludeQL": {"additionalProperties": false, "description": "Clean some fields from the document-level protobuf to reduce the total size of the request\n        Example::\n        - !ExcludeQL\n        with:\n            fields:\n                - chunks\n                - buffer\n\n        ExcludeQL will avoid `buffer` and `chunks` fields to be sent to the next `Pod`\n\n        :param fields: the pruned field names in tuple\n        :param traversal_paths: the traversal paths\n        :param *args: *args\n        :param **kwargs: **kwargs", "properties": {"jtype": {"const": "ExcludeQL", "description": "Clean some fields from the document-level protobuf to reduce the total size of the request", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"fields": {"default": null}, "priority": {"default": 0, "type": "number"}, "traversal_paths": {"default": ["r"], "type": "array"}}, "type": "object"}}, "type": "object"}, "Jina::Drivers::ExcludeReqQL": {"additionalProperties": false, "description": "Clean up request from the request-level protobuf message to reduce the total size of the message\n\n        This is often useful when the proceeding Pods require only a signal, not the full message.", "properties": {"jtype": {"const": "ExcludeReqQL", "description": "Clean up request from the request-level protobuf message to reduce the total size of the message", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"fields": {"default": null}, "priority": {"default": 0, "type": "number"}, "traversal_paths": {"default": ["r"], "type": "array"}}, "type": "object"}}, "type": "object"}, "Jina::Drivers::FieldEvaluateDriver": {"additionalProperties": false, "description": "Evaluate on the values from certain field, the extraction is implemented with :meth:`dunder_get`.\n\n    :param field: the field name to be extracted from the Protobuf.\n    :param *args: *args for super\n    :param **kwargs: **kwargs for super", "properties": {"jtype": {"const": "FieldEvaluateDriver", "description": "Evaluate on the values from certain field, the extraction is implemented with :meth:`dunder_get`.", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"executor": {"default": null, "description": "the name of the sub-executor, only necessary when :class:`jina.executors.compound.CompoundExecutor` is used", "type": "string"}, "field": {"default": null, "type": "string"}, "method": {"default": null, "description": "the function name of the executor that the driver feeds to", "type": "string"}, "priority": {"default": 0, "type": "number"}, "running_avg": {"default": false, "type": "boolean"}, "traversal_paths": {"default": ["c", "r"], "description": "Describes the leaves of the document tree on which _apply_all are called", "type": "array"}}, "type": "object"}}, "type": "object"}, "Jina::Drivers::FilterQL": {"additionalProperties": false, "description": "Filters incoming `docs` by evaluating a series of `lookup rules`.\n\n        This is often useful when the proceeding Pods require only a signal, not the full message.\n\n        Example ::\n        - !FilterQL\n            with:\n                lookups: {modality: mode2}\n        - !EncodeDriver\n            with:\n                method: encode\n\n        ensures that the EncodeDriver will only get documents which modality field value is `mode2` by filtering\n        those documents at the specific levels that do not comply with this condition", "properties": {"jtype": {"const": "FilterQL", "description": "Filters incoming `docs` by evaluating a series of `lookup rules`.", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"lookups": {"default": null, "description": "(dict) a dictionary where keys are interpreted by ``:class:`LookupLeaf`` to form a", "type": "object"}, "priority": {"default": 0, "type": "number"}, "traversal_paths": {"default": ["c", "r"], "description": "Describes the leaves of the document tree on which _apply_all are called", "type": "array"}}, "type": "object"}}, "type": "object"}, "Jina::Drivers::ForwardDriver": {"additionalProperties": false, "description": "Alias to :class:`RouteDriver`", "properties": {"jtype": {"const": "ForwardDriver", "description": "Alias to :class:`RouteDriver`", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"priority": {"default": 0, "type": "number"}, "raise_no_dealer": {"default": false, "type": "boolean"}}, "type": "object"}}, "type": "object"}, "Jina::Drivers::KVIndexDriver": {"additionalProperties": false, "description": "Forwards pairs of serialized documents and ids to the executor.", "properties": {"jtype": {"const": "KVIndexDriver", "description": "Forwards pairs of serialized documents and ids to the executor.", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"executor": {"default": null, "description": "the name of the sub-executor, only necessary when :class:`jina.executors.compound.CompoundExecutor` is used", "type": "string"}, "method": {"default": null, "description": "the function name of the executor that the driver feeds to", "type": "string"}, "priority": {"default": 0, "type": "number"}, "traversal_paths": {"default": ["c", "r"], "description": "Describes the leaves of the document tree on which _apply_all are called", "type": "array"}}, "type": "object"}}, "type": "object"}, "Jina::Drivers::KVSearchDriver": {"additionalProperties": false, "description": "Fill in the results using the :class:`jina.executors.indexers.meta.BinaryPbIndexer`\n\n    .. warning::\n        This driver runs a query for each document.\n        This may not be very efficient, as the total number of queries grows cubic with the number of documents, chunks\n        per document and top-k.\n\n            - traversal_paths = ['m'] => D x K\n            - traversal_paths = ['r'] => D\n            - traversal_paths = ['cm'] => D x C x K\n            - traversal_paths = ['m', 'cm'] => D x K + D x C x K\n\n        where:\n            - D is the number of queries\n            - C is the number of chunks per document\n            - K is the top-k", "properties": {"jtype": {"const": "KVSearchDriver", "description": "Fill in the results using the :class:`jina.executors.indexers.meta.BinaryPbIndexer`", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"executor": {"default": null, "description": "the name of the sub-executor, only necessary when :class:`jina.executors.compound.CompoundExecutor` is used", "type": "string"}, "is_update": {"default": true, "description": "when set to true the retrieved docs are merged into current message;", "type": "boolean"}, "method": {"default": null, "description": "the function name of the executor that the driver feeds to", "type": "string"}, "priority": {"default": 0, "type": "number"}, "traversal_paths": {"default": ["r", "c"], "type": "array"}}, "type": "object"}}, "type": "object"}, "Jina::Drivers::LegacyEncodeDriver": {"additionalProperties": false, "description": "Extract the content from documents and call executor and do encoding\n\n    .. note::\n\n        ``batch_size`` is specially useful when the same EncoderExecutor can be used for documents of different granularities\n         (chunks, chunks of chunks ...)\n\n    .. warning::\n\n        ``batch_size`` parameter was added to cover the case where root documents had very few chunks, and the encoder executor could\n        then only process them in batches of the chunk size of each document, which did not lead to the full use of batching capabilities\n        of the powerful Executors\n\n    :param batch_size: number of documents to be used simultaneously in the encoder :meth:_apply_all.\n    :param *args: *args for super\n    :param **kwargs: **kwargs for super", "properties": {"jtype": {"const": "LegacyEncodeDriver", "description": "Extract the content from documents and call executor and do encoding", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"batch_size": {"default": null, "type": "number"}, "executor": {"default": null, "description": "the name of the sub-executor, only necessary when :class:`jina.executors.compound.CompoundExecutor` is used", "type": "string"}, "method": {"default": null, "description": "the function name of the executor that the driver feeds to", "type": "string"}, "priority": {"default": 0, "type": "number"}, "traversal_paths": {"default": ["c", "r"], "description": "Describes the leaves of the document tree on which _apply_all are called", "type": "array"}}, "type": "object"}}, "type": "object"}, "Jina::Drivers::LoadGroundTruthDriver": {"additionalProperties": false, "description": "Driver used to search for the `document key` in a KVIndex to find the corresponding groundtruth.\n     (This driver does not use the `recursive structure` of jina Documents, and will not consider the `traversal_path` argument.\n     It only retrieves `groundtruth` taking documents at root as key)\n     This driver's job is to fill the `request` groundtruth with the corresponding groundtruth for each document if found in the corresponding KVIndexer.\n\n    .. warning::\n        The documents that are not found to have an indexed groundtruth are removed from the `request` so that the `Evaluator` only\n        works with documents which have groundtruth.", "properties": {"jtype": {"const": "LoadGroundTruthDriver", "description": "Driver used to search for the `document key` in a KVIndex to find the corresponding groundtruth.", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"executor": {"default": null, "description": "the name of the sub-executor, only necessary when :class:`jina.executors.compound.CompoundExecutor` is used", "type": "string"}, "is_update": {"default": true, "description": "when set to true the retrieved docs are merged into current message;", "type": "boolean"}, "method": {"default": null, "description": "the function name of the executor that the driver feeds to", "type": "string"}, "priority": {"default": 0, "type": "number"}, "traversal_paths": {"default": "m", "description": "traversal paths for the driver", "type": "array"}}, "type": "object"}}, "type": "object"}, "Jina::Drivers::LogInfoDriver": {"additionalProperties": false, "description": "Log output the request info", "properties": {"jtype": {"const": "LogInfoDriver", "description": "Log output the request info", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"json": {"default": true, "description": "(bool) indicating if the log output should be formatted as json", "type": "boolean"}, "key": {"default": "request", "description": "(str) that represents a first level or nested key in the dict", "type": "string"}, "priority": {"default": 0, "type": "number"}}, "type": "object"}}, "type": "object"}, "Jina::Drivers::Matches2DocRankDriver": {"additionalProperties": false, "description": "This driver is intended to only resort the given matches on the 0 level granularity for a document.\n    It gets the scores from a Ranking Executor, which does only change the scores of matches.\n    Afterwards, the Matches2DocRankDriver resorts all matches for a document.\n    Input-Output ::\n        Input:\n        document: {granularity: 0, adjacency: k}\n            |- matches: {granularity: 0, adjacency: k+1}\n        Output:\n        document: {granularity: 0, adjacency: k}\n            |- matches: {granularity: 0, adjacency: k+1} (Sorted according to scores from Ranker Executor)", "properties": {"jtype": {"const": "Matches2DocRankDriver", "description": "This driver is intended to only resort the given matches on the 0 level granularity for a document.", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"executor": {"default": null, "description": "the name of the sub-executor, only necessary when :class:`jina.executors.compound.CompoundExecutor` is used", "type": "string"}, "method": {"default": null, "description": "the function name of the executor that the driver feeds to", "type": "string"}, "priority": {"default": 0, "type": "number"}, "reverse": {"default": false, "type": "boolean"}, "traversal_paths": {"default": ["m"], "type": "array"}}, "type": "object"}}, "type": "object"}, "Jina::Drivers::MultiLabelPredictDriver": {"additionalProperties": false, "description": "Mapping prediction to a list of labels\n\n    Expect prediction to be 2dim array, zero-one valued. Each row corresponds to\n    a sample, each column corresponds to a label. Each row can have only multiple 1s.\n\n    This is often used with multi-label classifier, where each instance can have multiple labels", "properties": {"jtype": {"const": "MultiLabelPredictDriver", "description": "Mapping prediction to a list of labels", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"executor": {"default": null, "description": "the name of the sub-executor, only necessary when :class:`jina.executors.compound.CompoundExecutor` is used", "type": "string"}, "fields": {"default": "embedding"}, "labels": {"default": null, "type": "array"}, "method": {"default": null, "description": "the function name of the executor that the driver feeds to", "type": "string"}, "output_tag": {"default": "prediction", "type": "string"}, "priority": {"default": 0, "type": "number"}, "traversal_paths": {"default": ["c", "r"], "description": "Describes the leaves of the document tree on which _apply_all are called", "type": "array"}}, "type": "object"}}, "type": "object"}, "Jina::Drivers::MultiModalDriver": {"additionalProperties": false, "description": "Extract multimodal embeddings from different modalities.\n\n    Input-Output ::\n\n        Input:\n        document:\n                |- chunk: {modality: mode1}\n                |\n                |- chunk: {modality: mode2}\n        Output:\n        document: (embedding: multimodal encoding)\n                |- chunk: {modality: mode1}\n                |\n                |- chunk: {modality: mode2}\n\n    .. note::\n\n        - It traverses on the ``documents`` for which we want to apply the ``multimodal`` embedding. This way\n\n        we can use the `batching` capabilities for the `executor`.\n\n    .. warning::\n        - It assumes that every ``chunk`` of a ``document`` belongs to a different modality.", "properties": {"jtype": {"const": "MultiModalDriver", "description": "Extract multimodal embeddings from different modalities.", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"executor": {"default": null, "description": "the name of the sub-executor, only necessary when :class:`jina.executors.compound.CompoundExecutor` is used", "type": "string"}, "method": {"default": null, "description": "the function name of the executor that the driver feeds to", "type": "string"}, "priority": {"default": 0, "type": "number"}, "traversal_paths": {"default": ["r"], "type": "array"}}, "type": "object"}}, "type": "object"}, "Jina::Drivers::NDArrayEvaluateDriver": {"additionalProperties": false, "description": "Drivers used to pass `embedding` from documents and groundtruths to an executor and add the evaluation value.\n\n    .. note::\n        - Valid fields:\n                     ['blob', 'embedding']", "properties": {"jtype": {"const": "NDArrayEvaluateDriver", "description": "Drivers used to pass `embedding` from documents and groundtruths to an executor and add the evaluation value.", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"executor": {"default": null, "description": "the name of the sub-executor, only necessary when :class:`jina.executors.compound.CompoundExecutor` is used", "type": "string"}, "field": {"default": "embedding", "type": "string"}, "method": {"default": null, "description": "the function name of the executor that the driver feeds to", "type": "string"}, "priority": {"default": 0, "type": "number"}, "running_avg": {"default": false, "type": "boolean"}, "traversal_paths": {"default": ["c", "r"], "description": "Describes the leaves of the document tree on which _apply_all are called", "type": "array"}}, "type": "object"}}, "type": "object"}, "Jina::Drivers::OneHotPredictDriver": {"additionalProperties": false, "description": "Mapping prediction to one of the given labels\n\n    Expect prediction to be 2dim array, zero-one valued. Each row corresponds to\n    a sample, each column corresponds to a label. Each row can have only one 1.\n\n    This is often used with multi-class classifier.", "properties": {"jtype": {"const": "OneHotPredictDriver", "description": "Mapping prediction to one of the given labels", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"executor": {"default": null, "description": "the name of the sub-executor, only necessary when :class:`jina.executors.compound.CompoundExecutor` is used", "type": "string"}, "fields": {"default": "embedding"}, "labels": {"default": null, "type": "array"}, "method": {"default": null, "description": "the function name of the executor that the driver feeds to", "type": "string"}, "output_tag": {"default": "prediction", "type": "string"}, "priority": {"default": 0, "type": "number"}, "traversal_paths": {"default": ["c", "r"], "description": "Describes the leaves of the document tree on which _apply_all are called", "type": "array"}}, "type": "object"}}, "type": "object"}, "Jina::Drivers::Prediction2DocBlobDriver": {"additionalProperties": false, "description": "Write the prediction result directly into ``document.blob``.\n\n    .. warning::\n\n        This will erase the content in ``document.text`` and ``document.buffer``.", "properties": {"jtype": {"const": "Prediction2DocBlobDriver", "description": "Write the prediction result directly into ``document.blob``.", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"executor": {"default": null, "description": "the name of the sub-executor, only necessary when :class:`jina.executors.compound.CompoundExecutor` is used", "type": "string"}, "fields": {"default": "embedding"}, "method": {"default": null, "description": "the function name of the executor that the driver feeds to", "type": "string"}, "priority": {"default": 0, "type": "number"}, "traversal_paths": {"default": ["c", "r"], "description": "Describes the leaves of the document tree on which _apply_all are called", "type": "array"}}, "type": "object"}}, "type": "object"}, "Jina::Drivers::RankEvaluateDriver": {"additionalProperties": false, "description": "Drivers used to pass `matches` from documents and groundtruths to an executor and add the evaluation value.\n\n        - Example fields:\n            ['tags__id', 'score__value]\n\n    :param fields: the fields names to be extracted from the Protobuf.\n            The differences with `:class:FieldEvaluateDriver` are:\n                - More than one field is allowed. For instance, for NDCGComputation you may need to have both `ID` and `Relevance` information.\n                - The fields are extracted from the `matches` of the `Documents` and the `Groundtruth` so it returns a sequence of values.\n    :param *args:\n    :param **kwargs:", "properties": {"jtype": {"const": "RankEvaluateDriver", "description": "Drivers used to pass `matches` from documents and groundtruths to an executor and add the evaluation value.", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"executor": {"default": null, "description": "the name of the sub-executor, only necessary when :class:`jina.executors.compound.CompoundExecutor` is used", "type": "string"}, "fields": {"default": ["id"], "type": "string"}, "method": {"default": null, "description": "the function name of the executor that the driver feeds to", "type": "string"}, "priority": {"default": 0, "type": "number"}, "running_avg": {"default": false, "type": "boolean"}, "traversal_paths": {"default": ["c", "r"], "description": "Describes the leaves of the document tree on which _apply_all are called", "type": "array"}}, "type": "object"}}, "type": "object"}, "Jina::Drivers::ReduceAllDriver": {"additionalProperties": false, "description": ":class:`ReduceAllDriver` merges chunks/matches from all requests, recursively.\n\n    .. note::\n\n        It uses the last request as a reference.", "properties": {"jtype": {"const": "ReduceAllDriver", "description": ":class:`ReduceAllDriver` merges chunks/matches from all requests, recursively.", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"priority": {"default": 0, "type": "number"}, "traversal_paths": {"default": ["c"], "type": "array"}}, "type": "object"}}, "type": "object"}, "Jina::Drivers::ReduceDriver": {"additionalProperties": false, "description": "Alias to :class:`RouteDriver`", "properties": {"jtype": {"const": "ReduceDriver", "description": "Alias to :class:`RouteDriver`", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"priority": {"default": 0, "type": "number"}, "raise_no_dealer": {"default": false, "type": "boolean"}}, "type": "object"}}, "type": "object"}, "Jina::Drivers::ReverseQL": {"additionalProperties": false, "description": "Reverses the order of the provided ``docs``.\n\n        This is often useful when the proceeding Pods require only a signal, not the full message.\n\n        Example ::\n        - !Chunk2DocRankerDriver {}\n        - !ReverseQL {}\n\n        will reverse the order of the documents returned by the `Chunk2DocRankerDriver` before sending them to the next `Pod`", "properties": {"jtype": {"const": "ReverseQL", "description": "Reverses the order of the provided ``docs``.", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"priority": {"default": 0, "type": "number"}, "traversal_paths": {"default": ["r"], "type": "array"}}, "type": "object"}}, "type": "object"}, "Jina::Drivers::RouteDriver": {"additionalProperties": false, "description": "Ensures that data requests are forwarded to the downstream `:class:`BasePea` ensuring\n      that the load is balanced between parallel `:class:`BasePea` if the scheduling `:class:`SchedulerType` is LOAD_BALANCE.\n      \n    .. note::\n        - The dealer never receives a control request from the router,\n        every time it finishes a job and sends via out_sock, it returns the envelope with control\n        request idle back to the router. The dealer also sends control request idle to the router\n        when it first starts.\n\n        - The router receives requests from both dealer and upstream pusher.\n         if it is an upstream request, use LB to schedule the receiver,\n         mark it in the envelope if it is a control request in\n\n    :param raise_no_dealer: raise a RuntimeError when no available dealer\n    :param *args: *args for super\n    :param **kwargs: **kwargs for super", "properties": {"jtype": {"const": "RouteDriver", "description": "Ensures that data requests are forwarded to the downstream `:class:`BasePea` ensuring", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"priority": {"default": 0, "type": "number"}, "raise_no_dealer": {"default": false, "type": "boolean"}}, "type": "object"}}, "type": "object"}, "Jina::Drivers::SegmentDriver": {"additionalProperties": false, "description": "Drivers inherited from this Driver will bind :meth:`segment` by default", "properties": {"jtype": {"const": "SegmentDriver", "description": "Drivers inherited from this Driver will bind :meth:`segment` by default", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"executor": {"default": null, "description": "the name of the sub-executor, only necessary when :class:`jina.executors.compound.CompoundExecutor` is used", "type": "string"}, "method": {"default": null, "description": "the function name of the executor that the driver feeds to", "type": "string"}, "priority": {"default": 0, "type": "number"}, "traversal_paths": {"default": ["r"], "type": "array"}}, "type": "object"}}, "type": "object"}, "Jina::Drivers::SelectQL": {"additionalProperties": false, "description": "Selects some fields from the chunk-level protobuf to reduce the total size of the request, it works with the opposite\n    logic as `:class:`ExcludeQL`\n\n        Example::\n        - !SelectQL\n        with:\n            fields:\n                - matches\n\n        SelectQL will ensure that the `outgoing` documents only contain the field `matches`", "properties": {"jtype": {"const": "SelectQL", "description": "Selects some fields from the chunk-level protobuf to reduce the total size of the request, it works with the opposite", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"fields": {"default": null}, "priority": {"default": 0, "type": "number"}, "traversal_paths": {"default": ["r"], "type": "array"}}, "type": "object"}}, "type": "object"}, "Jina::Drivers::SelectReqQL": {"additionalProperties": false, "description": "Clean up request from the request-level protobuf message to reduce the total size of the message, it works with the opposite\n    logic as `:class:`ExcludeReqQL`\n\n\n    .. # noqa: DAR101", "properties": {"jtype": {"const": "SelectReqQL", "description": "Clean up request from the request-level protobuf message to reduce the total size of the message, it works with the opposite", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"fields": {"default": null}, "priority": {"default": 0, "type": "number"}, "traversal_paths": {"default": ["r"], "type": "array"}}, "type": "object"}}, "type": "object"}, "Jina::Drivers::SliceQL": {"additionalProperties": false, "description": "Restrict the size of the ``docs`` to ``k`` (given by the request)\n\n        Example::\n        - !ReduceAllDriver\n            with:\n                traversal_paths: ['m']\n        - !SortQL\n            with:\n                reverse: true\n                field: 'score__value'\n                traversal_paths: ['m']\n        - !SliceQL\n            with:\n                start: 0\n                end: 50\n                traversal_paths: ['m']\n\n        `SliceQL` will ensure that only the first 50 documents are returned from this `Pod`", "properties": {"jtype": {"const": "SliceQL", "description": "Restrict the size of the ``docs`` to ``k`` (given by the request)", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"end": {"default": null, "description": "Zero-based index before which to end extraction.", "type": "number"}, "priority": {"default": 0, "type": "number"}, "start": {"default": null, "description": "Zero-based index at which to start extraction.", "type": "number"}, "traversal_paths": {"default": ["c", "r"], "description": "Describes the leaves of the document tree on which _apply_all are called", "type": "array"}}, "type": "object"}}, "type": "object"}, "Jina::Drivers::SortQL": {"additionalProperties": false, "description": "Sorts the incoming of the documents by the value of a given field.\n     It can also work in reverse mode\n\n        Example::\n        - !ReduceAllDriver\n            with:\n                traversal_paths: ['m']\n        - !SortQL\n            with:\n                reverse: true\n                field: 'score__value'\n                traversal_paths: ['m']\n        - !SliceQL\n            with:\n                start: 0\n                end: 50\n                traversal_paths: ['m']\n\n        `SortQL` will ensure that only the documents are sorted by the score value before slicing the first top 50 documents", "properties": {"jtype": {"const": "SortQL", "description": "Sorts the incoming of the documents by the value of a given field.", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"field": {"default": null, "description": "the value of the field drives the sort of the iterable docs", "type": "string"}, "priority": {"default": 0, "type": "number"}, "reverse": {"default": false, "description": "sort the value from big to small", "type": "boolean"}, "traversal_paths": {"default": ["r"], "description": "the traversal paths", "type": "array"}}, "type": "object"}}, "type": "object"}, "Jina::Drivers::TaggingCacheDriver": {"additionalProperties": false, "description": "A driver for labelling the hit-cache docs with certain tags.", "properties": {"jtype": {"const": "TaggingCacheDriver", "description": "A driver for labelling the hit-cache docs with certain tags.", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"executor": {"default": null, "description": "the name of the sub-executor, only necessary when :class:`jina.executors.compound.CompoundExecutor` is used", "type": "string"}, "method": {"default": null, "description": "the function name of the executor that the driver feeds to", "type": "string"}, "priority": {"default": 0, "type": "number"}, "tags": {"default": null, "description": "the tags to be updated on hit docs", "type": "object"}, "traversal_paths": {"default": ["c", "r"], "description": "Describes the leaves of the document tree on which _apply_all are called", "type": "array"}, "with_serialization": {"default": false, "type": "boolean"}}, "type": "object"}}, "type": "object"}, "Jina::Drivers::Text2URI": {"additionalProperties": false, "description": "Driver to convert text to URI", "properties": {"jtype": {"const": "Text2URI", "description": "Driver to convert text to URI", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"convert_fn": {"default": null, "description": "the method name from `:class:`Document` to be applied", "type": "string"}, "priority": {"default": 0, "type": "number"}, "traversal_paths": {"default": ["c", "r"], "description": "Describes the leaves of the document tree on which _apply_all are called", "type": "array"}}, "type": "object"}}, "type": "object"}, "Jina::Drivers::TextEvaluateDriver": {"additionalProperties": false, "description": "Drivers used to pass a content field from documents and groundtruths to an executor and add the evaluation value.\n\n    .. note::\n        - Valid fields:\n                    ['id', 'level_name', 'parent_id', 'text', 'mime_type', 'uri', 'modality']", "properties": {"jtype": {"const": "TextEvaluateDriver", "description": "Drivers used to pass a content field from documents and groundtruths to an executor and add the evaluation value.", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"executor": {"default": null, "description": "the name of the sub-executor, only necessary when :class:`jina.executors.compound.CompoundExecutor` is used", "type": "string"}, "field": {"default": "text", "type": "string"}, "method": {"default": null, "description": "the function name of the executor that the driver feeds to", "type": "string"}, "priority": {"default": 0, "type": "number"}, "running_avg": {"default": false, "type": "boolean"}, "traversal_paths": {"default": ["c", "r"], "description": "Describes the leaves of the document tree on which _apply_all are called", "type": "array"}}, "type": "object"}}, "type": "object"}, "Jina::Drivers::URI2Blob": {"additionalProperties": false, "description": "Driver to convert URI to blob", "properties": {"jtype": {"const": "URI2Blob", "description": "Driver to convert URI to blob", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"convert_fn": {"default": "convert_uri_to_blob", "type": "string"}, "priority": {"default": 0, "type": "number"}, "traversal_paths": {"default": ["c", "r"], "description": "Describes the leaves of the document tree on which _apply_all are called", "type": "array"}}, "type": "object"}}, "type": "object"}, "Jina::Drivers::URI2Buffer": {"additionalProperties": false, "description": "Driver to convert URI to buffer", "properties": {"jtype": {"const": "URI2Buffer", "description": "Driver to convert URI to buffer", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"convert_fn": {"default": null, "description": "the method name from `:class:`Document` to be applied", "type": "string"}, "priority": {"default": 0, "type": "number"}, "traversal_paths": {"default": ["c", "r"], "description": "Describes the leaves of the document tree on which _apply_all are called", "type": "array"}}, "type": "object"}}, "type": "object"}, "Jina::Drivers::URI2DataURI": {"additionalProperties": false, "description": "Driver to convert URI to data URI", "properties": {"jtype": {"const": "URI2DataURI", "description": "Driver to convert URI to data URI", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"convert_fn": {"default": null, "description": "the method name from `:class:`Document` to be applied", "type": "string"}, "priority": {"default": 0, "type": "number"}, "traversal_paths": {"default": ["c", "r"], "description": "Describes the leaves of the document tree on which _apply_all are called", "type": "array"}}, "type": "object"}}, "type": "object"}, "Jina::Drivers::URI2Text": {"additionalProperties": false, "description": "Driver to convert URI to text", "properties": {"jtype": {"const": "URI2Text", "description": "Driver to convert URI to text", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"convert_fn": {"default": "convert_uri_to_text", "type": "string"}, "priority": {"default": 0, "type": "number"}, "traversal_paths": {"default": ["c", "r"], "description": "Describes the leaves of the document tree on which _apply_all are called", "type": "array"}}, "type": "object"}}, "type": "object"}, "Jina::Drivers::VectorFillDriver": {"additionalProperties": false, "description": "Fill in the embedding by their document id.", "properties": {"jtype": {"const": "VectorFillDriver", "description": "Fill in the embedding by their document id.", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"executor": {"default": null, "description": "the name of the sub-executor, only necessary when :class:`jina.executors.compound.CompoundExecutor` is used", "type": "string"}, "method": {"default": null, "description": "the function name of the executor that the driver feeds to", "type": "string"}, "priority": {"default": 0, "type": "number"}, "traversal_paths": {"default": ["r", "c"], "type": "array"}}, "type": "object"}}, "type": "object"}, "Jina::Drivers::VectorIndexDriver": {"additionalProperties": false, "description": "Extracts embeddings and ids from the documents and forwards them to the executor.\n    In case `method` is 'delete', the embeddings are ignored.\n    If `method` is not 'delete', documents without content are filtered out.", "properties": {"jtype": {"const": "VectorIndexDriver", "description": "Extracts embeddings and ids from the documents and forwards them to the executor.", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"executor": {"default": null, "description": "the name of the sub-executor, only necessary when :class:`jina.executors.compound.CompoundExecutor` is used", "type": "string"}, "method": {"default": null, "description": "the function name of the executor that the driver feeds to", "type": "string"}, "priority": {"default": 0, "type": "number"}, "traversal_paths": {"default": ["c", "r"], "description": "Describes the leaves of the document tree on which _apply_all are called", "type": "array"}}, "type": "object"}}, "type": "object"}, "Jina::Drivers::VectorSearchDriver": {"additionalProperties": false, "description": "Extract embeddings from the request for the executor to query.", "properties": {"jtype": {"const": "VectorSearchDriver", "description": "Extract embeddings from the request for the executor to query.", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"executor": {"default": null, "description": "the name of the sub-executor, only necessary when :class:`jina.executors.compound.CompoundExecutor` is used", "type": "string"}, "fill_embedding": {"default": false, "description": "fill in the embedding of the corresponding doc,", "type": "boolean"}, "method": {"default": null, "description": "the function name of the executor that the driver feeds to", "type": "string"}, "priority": {"default": 0, "type": "number"}, "top_k": {"default": 50, "description": "top-k document ids to retrieve", "type": "number"}, "traversal_paths": {"default": ["r", "c"], "type": "array"}}, "type": "object"}}, "type": "object"}, "Jina::Drivers::WaitDriver": {"additionalProperties": false, "description": "Wait for some seconds, mainly for demo purpose", "properties": {"jtype": {"const": "WaitDriver", "description": "Wait for some seconds, mainly for demo purpose", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"priority": {"default": 0, "type": "number"}}, "type": "object"}}, "type": "object"}, "Jina::Executors::AlbumentationsCrafter": {"additionalProperties": false, "description": "Apply transforms from the Albumentations package to the image.\n\n    This crafter allows you to apply any of the Albumenation's transforms to\n    an image. You can also compose as many transforms as you would like inside\n    a single object. For a full list of available transforms, visit\n    `Albumentations's GitHub page <https://github.com/albumentations-team/albumentations/#list-of-augmentations>`_\n    or see `the documentation <https://albumentations.ai/docs/api_reference/augmentations/transforms/>`_.\n\n    .. attention::\n        Albumentations' transforms were created for the purpose of image augmentation,\n        where the transforms are applied randomly. However in indexing/search\n        context you will want the transforms to be applied deterministically.\n\n        For that reason pay attention to the parameters and set them in a way that\n        any randomness is removed. For example, if you want to rotate the image 45\n        degrees, set the ``limit`` parameter in the ``Rotate`` transformation to\n        ``[45,45]``. And you don't want to use some inherently random transforms,\n        such as ``RandomRotate90``.\n\n        We take care of some of this automatically: we set ``always_apply=True`` for\n        all transforms, so that they are always applied.\n\n    Example:\n        The transforms that you provide will be applied in the order provided using\n        ``A.Compose``. For example, the ``crafter`` in the example below\n\n        .. code-block:: python\n\n            from jina.hub.crafters.image.AlbumentationsCrafter import AlbumentationsCrafter\n\n            transforms = [\n                'HorizontalFlip',\n                {'Rotate': {'limit': [45, 45]}}\n            ]\n            crafter = AlbumentationsCrafter(transforms)\n\n        will have the equivalent effect as the ``transform`` below\n\n        .. code-block:: python\n\n            import albumentations as A\n\n            transform = A.Compose([\n                A.HorizontalFlip(always_apply=True),\n                A.Rotate(limit=[45,45], always_apply=True)\n            ])\n\n    :param transforms: A list of transformations that should be applied.\n        Each item in the list should be of the form\n        ``{'TransformClass': kwargs}`` or ``'TransformClass'``.\n    :param args:  Additional positional arguments\n    :param kwargs: A dictionary with keyword arguments that will\n        be passed to ``TransformClass`` at initialization\n        (or an empty dict if there are no such arguments).\n        The argument ``always_apply=True`` will be added to all kwargs\n        automatically.", "properties": {"jtype": {"const": "AlbumentationsCrafter", "description": "Apply transforms from the Albumentations package to the image.", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"transforms": {"default": ["HorizontalFlip"], "type": "array"}}, "type": "object"}}, "type": "object"}, "Jina::Executors::All": {"items": {"oneOf": [{"$ref": "#/definitions/Jina::Executors::BaseEvaluator"}, {"$ref": "#/definitions/Jina::Executors::BaseRankingEvaluator"}, {"$ref": "#/definitions/Jina::Executors::BaseExecutor"}, {"$ref": "#/definitions/Jina::Executors::BaseIndexer"}, {"$ref": "#/definitions/Jina::Executors::BaseKVIndexer"}, {"$ref": "#/definitions/Jina::Executors::BaseVectorIndexer"}, {"$ref": "#/definitions/Jina::Executors::CompoundExecutor"}, {"$ref": "#/definitions/Jina::Executors::CompoundIndexer"}, {"$ref": "#/definitions/Jina::Executors::UniqueVectorIndexer"}, {"$ref": "#/definitions/Jina::Executors::BaseSegmenter"}, {"$ref": "#/definitions/Jina::Executors::BaseMultiModalEncoder"}, {"$ref": "#/definitions/Jina::Executors::BinaryPbIndexer"}, {"$ref": "#/definitions/Jina::Executors::DataURIPbIndexer"}, {"$ref": "#/definitions/Jina::Executors::UniquePbIndexer"}, {"$ref": "#/definitions/Jina::Executors::BaseEncoder"}, {"$ref": "#/definitions/Jina::Executors::BaseMindsporeEncoder"}, {"$ref": "#/definitions/Jina::Executors::BaseOnnxEncoder"}, {"$ref": "#/definitions/Jina::Executors::BasePaddleEncoder"}, {"$ref": "#/definitions/Jina::Executors::BaseTFEncoder"}, {"$ref": "#/definitions/Jina::Executors::BaseTorchEncoder"}, {"$ref": "#/definitions/Jina::Executors::BaseClassifier"}, {"$ref": "#/definitions/Jina::Executors::BaseCrafter"}, {"$ref": "#/definitions/Jina::Executors::BaseEmbeddingEvaluator"}, {"$ref": "#/definitions/Jina::Executors::CosineEvaluator"}, {"$ref": "#/definitions/Jina::Executors::BaseCache"}, {"$ref": "#/definitions/Jina::Executors::DocCache"}, {"$ref": "#/definitions/Jina::Executors::BaseRanker"}, {"$ref": "#/definitions/Jina::Executors::Chunk2DocRanker"}, {"$ref": "#/definitions/Jina::Executors::Match2DocRanker"}, {"$ref": "#/definitions/Jina::Executors::EuclideanEvaluator"}, {"$ref": "#/definitions/Jina::Executors::BaseNumericEncoder"}, {"$ref": "#/definitions/Jina::Executors::TransformEncoder"}, {"$ref": "#/definitions/Jina::Executors::RecallEvaluator"}, {"$ref": "#/definitions/Jina::Executors::FileBasedEvaluator"}, {"$ref": "#/definitions/Jina::Executors::BaseNumpyIndexer"}, {"$ref": "#/definitions/Jina::Executors::NumpyIndexer"}, {"$ref": "#/definitions/Jina::Executors::BaseAudioEncoder"}, {"$ref": "#/definitions/Jina::Executors::BaseImageEncoder"}, {"$ref": "#/definitions/Jina::Executors::BaseTextEncoder"}, {"$ref": "#/definitions/Jina::Executors::BaseVideoEncoder"}, {"$ref": "#/definitions/Jina::Executors::BaseTextEvaluator"}, {"$ref": "#/definitions/Jina::Executors::TextLengthEvaluator"}, {"$ref": "#/definitions/Jina::Executors::PrecisionEvaluator"}, {"$ref": "#/definitions/Jina::Executors::CenterImageCropper"}, {"$ref": "#/definitions/Jina::Executors::CustomKerasImageEncoder"}, {"$ref": "#/definitions/Jina::Executors::ChromaPitchEncoder"}, {"$ref": "#/definitions/Jina::Executors::UniversalSentenceEncoder"}, {"$ref": "#/definitions/Jina::Executors::AveragePrecisionEvaluator"}, {"$ref": "#/definitions/Jina::Executors::IncrementalPCAEncoder"}, {"$ref": "#/definitions/Jina::Executors::ImageResizer"}, {"$ref": "#/definitions/Jina::Executors::LevelDBIndexer"}, {"$ref": "#/definitions/Jina::Executors::AudioMonophoner"}, {"$ref": "#/definitions/Jina::Executors::ImageOnnxEncoder"}, {"$ref": "#/definitions/Jina::Executors::AnnoyIndexer"}, {"$ref": "#/definitions/Jina::Executors::Wav2VecSpeechEncoder"}, {"$ref": "#/definitions/Jina::Executors::Sentencizer"}, {"$ref": "#/definitions/Jina::Executors::L1NormEvaluator"}, {"$ref": "#/definitions/Jina::Executors::TorchObjectDetectionSegmenter"}, {"$ref": "#/definitions/Jina::Executors::SlidingWindowAudioSlicer"}, {"$ref": "#/definitions/Jina::Executors::PDFExtractorSegmenter"}, {"$ref": "#/definitions/Jina::Executors::TirgImageEncoder"}, {"$ref": "#/definitions/Jina::Executors::BigTransferEncoder"}, {"$ref": "#/definitions/Jina::Executors::BleuEvaluator"}, {"$ref": "#/definitions/Jina::Executors::RedisDBIndexer"}, {"$ref": "#/definitions/Jina::Executors::DeepSegmenter"}, {"$ref": "#/definitions/Jina::Executors::ImageTorchEncoder"}, {"$ref": "#/definitions/Jina::Executors::ImageNormalizer"}, {"$ref": "#/definitions/Jina::Executors::SptagIndexer"}, {"$ref": "#/definitions/Jina::Executors::ImageFlipper"}, {"$ref": "#/definitions/Jina::Executors::HammingDistanceEvaluator"}, {"$ref": "#/definitions/Jina::Executors::JiebaSegmenter"}, {"$ref": "#/definitions/Jina::Executors::JaccardSimilarityEvaluator"}, {"$ref": "#/definitions/Jina::Executors::ArrayStringReader"}, {"$ref": "#/definitions/Jina::Executors::VSEImageEncoder"}, {"$ref": "#/definitions/Jina::Executors::FastICAEncoder"}, {"$ref": "#/definitions/Jina::Executors::SlidingWindowSegmenter"}, {"$ref": "#/definitions/Jina::Executors::FScoreEvaluator"}, {"$ref": "#/definitions/Jina::Executors::NGTIndexer"}, {"$ref": "#/definitions/Jina::Executors::ScannIndexer"}, {"$ref": "#/definitions/Jina::Executors::ImageReader"}, {"$ref": "#/definitions/Jina::Executors::TextPaddlehubEncoder"}, {"$ref": "#/definitions/Jina::Executors::ImagePaddlehubEncoder"}, {"$ref": "#/definitions/Jina::Executors::AlbumentationsCrafter"}, {"$ref": "#/definitions/Jina::Executors::AudioSlicer"}, {"$ref": "#/definitions/Jina::Executors::CustomImageTorchEncoder"}, {"$ref": "#/definitions/Jina::Executors::AudioNormalizer"}, {"$ref": "#/definitions/Jina::Executors::SimpleAggregateRanker"}, {"$ref": "#/definitions/Jina::Executors::VideoPaddleEncoder"}, {"$ref": "#/definitions/Jina::Executors::NDCGEvaluator"}, {"$ref": "#/definitions/Jina::Executors::MinkowskiDistanceEvaluator"}, {"$ref": "#/definitions/Jina::Executors::CompressionVaeEncoder"}, {"$ref": "#/definitions/Jina::Executors::SlidingWindowImageCropper"}, {"$ref": "#/definitions/Jina::Executors::RougeEvaluator"}, {"$ref": "#/definitions/Jina::Executors::ImageKerasEncoder"}, {"$ref": "#/definitions/Jina::Executors::FiveImageCropper"}, {"$ref": "#/definitions/Jina::Executors::TfIdfRanker"}, {"$ref": "#/definitions/Jina::Executors::MongoDBIndexer"}, {"$ref": "#/definitions/Jina::Executors::LaserEncoder"}, {"$ref": "#/definitions/Jina::Executors::TSNEEncoder"}, {"$ref": "#/definitions/Jina::Executors::RandomImageCropper"}, {"$ref": "#/definitions/Jina::Executors::GleuEvaluator"}, {"$ref": "#/definitions/Jina::Executors::MilvusIndexer"}, {"$ref": "#/definitions/Jina::Executors::InfiniteNormEvaluator"}, {"$ref": "#/definitions/Jina::Executors::RandomGaussianEncoder"}, {"$ref": "#/definitions/Jina::Executors::ReciprocalRankEvaluator"}, {"$ref": "#/definitions/Jina::Executors::BM25Ranker"}, {"$ref": "#/definitions/Jina::Executors::BiMatchRanker"}, {"$ref": "#/definitions/Jina::Executors::TikaExtractor"}, {"$ref": "#/definitions/Jina::Executors::FlairTextEncoder"}, {"$ref": "#/definitions/Jina::Executors::FeatureAgglomerationEncoder"}, {"$ref": "#/definitions/Jina::Executors::FarmTextEncoder"}, {"$ref": "#/definitions/Jina::Executors::AudioReader"}, {"$ref": "#/definitions/Jina::Executors::TirgMultiModalEncoder"}, {"$ref": "#/definitions/Jina::Executors::OneHotTextEncoder"}, {"$ref": "#/definitions/Jina::Executors::VideoTorchEncoder"}, {"$ref": "#/definitions/Jina::Executors::EditDistanceEvaluator"}, {"$ref": "#/definitions/Jina::Executors::TransformerTFEncoder"}, {"$ref": "#/definitions/Jina::Executors::VSETextEncoder"}, {"$ref": "#/definitions/Jina::Executors::LevenshteinRanker"}, {"$ref": "#/definitions/Jina::Executors::RandomSparseEncoder"}, {"$ref": "#/definitions/Jina::Executors::MFCCTimbreEncoder"}, {"$ref": "#/definitions/Jina::Executors::FaissIndexer"}, {"$ref": "#/definitions/Jina::Executors::ZarrIndexer"}, {"$ref": "#/definitions/Jina::Executors::NmsLibIndexer"}, {"$ref": "#/definitions/Jina::Executors::ArrayBytesReader"}, {"$ref": "#/definitions/Jina::Executors::TransformerTorchEncoder"}, {"$ref": "#/definitions/Jina::Executors::ImageCropper"}]}, "minItems": 1, "type": "array"}, "Jina::Executors::AnnoyIndexer": {"additionalProperties": false, "description": "Annoy powered vector indexer\n\n    For more information about the Annoy supported parameters, please consult:\n        - https://github.com/spotify/annoy\n\n    .. note::\n        Annoy package dependency is only required at the query time.", "properties": {"jtype": {"const": "AnnoyIndexer", "description": "Annoy powered vector indexer", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"compress_level": {"default": 1, "description": "The compresslevel argument is an integer from 0 to 9 controlling the", "type": "number"}, "index_filename": {"default": null, "description": "the name of the file for storing the index, when not given metas.name is used.", "type": "string"}, "key_length": {"default": 36, "type": "number"}, "metric": {"default": "euclidean", "description": "Metric can be \"angular\", \"euclidean\", \"manhattan\", \"hamming\", or \"dot\"", "type": "string"}, "n_trees": {"default": 10, "description": "builds a forest of n_trees trees. More trees gives higher precision when querying.", "type": "number"}, "ref_indexer": {"default": null, "description": "Bootstrap the current indexer from a ``ref_indexer``. This enables user to switch"}, "search_k": {"default": -1, "description": "At query time annoy will inspect up to search_k nodes which defaults to", "type": "number"}}, "type": "object"}}, "type": "object"}, "Jina::Executors::ArrayBytesReader": {"additionalProperties": false, "description": "Convert a byte stream into a numpy array and save to the Document.\n\n    The size of the vectors is provided in the constructor\n    so that the numpy array can be interpreted properly.\n\n    :param as_type: The numpy array will be this type\n    :param args:  Additional positional arguments\n    :param kwargs: Additional keyword arguments", "properties": {"jtype": {"const": "ArrayBytesReader", "description": "Convert a byte stream into a numpy array and save to the Document.", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"as_type": {"default": "float32", "type": "string"}}, "type": "object"}}, "type": "object"}, "Jina::Executors::ArrayStringReader": {"additionalProperties": false, "description": "Convert string of numbers into a numpy array and save to the Document.\n\n    Numbers are split on the provided delimiter, default is comma (,)\n\n    :param delimiter: delimiter between numbers\n    :param as_type: The numpy array will be this type\n    :param args:  Additional positional arguments\n    :param kwargs: Additional keyword arguments", "properties": {"jtype": {"const": "ArrayStringReader", "description": "Convert string of numbers into a numpy array and save to the Document.", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"as_type": {"default": "float32", "type": "string"}, "delimiter": {"default": ",", "type": "string"}}, "type": "object"}}, "type": "object"}, "Jina::Executors::AudioMonophoner": {"additionalProperties": false, "description": ":class:`AudioMonophoner` makes the audio signal monophonic on doc-level.", "properties": {"jtype": {"const": "AudioMonophoner", "description": ":class:`AudioMonophoner` makes the audio signal monophonic on doc-level.", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {}, "type": "object"}}, "type": "object"}, "Jina::Executors::AudioNormalizer": {"additionalProperties": false, "description": ":class:`AudioNormalizer` normalizes the audio signal on doc-level.", "properties": {"jtype": {"const": "AudioNormalizer", "description": ":class:`AudioNormalizer` normalizes the audio signal on doc-level.", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {}, "type": "object"}}, "type": "object"}, "Jina::Executors::AudioReader": {"additionalProperties": false, "description": "Read and resample the audio signal on doc-level.\n\n    :class:`AudioReader` loads an audio file as `ndarray` and resamples the audio signal to the target sampling rate\n    (default 22050Hz).\n\n    :param target_sample_rate: target sampling rate (scalar number > 0)\n    :param args:  Additional positional arguments\n    :param kwargs: Additional keyword arguments", "properties": {"jtype": {"const": "AudioReader", "description": "Read and resample the audio signal on doc-level.", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"target_sample_rate": {"default": 22050, "type": "number"}}, "type": "object"}}, "type": "object"}, "Jina::Executors::AudioSlicer": {"additionalProperties": false, "description": ":class:`AudioSlicer` segments the audio signal on the doc-level into frames on the chunk-level.\n\n    :param frame_length: the number of samples in each frame\n    :param hop_length: the number of steps to advance between frames", "properties": {"jtype": {"const": "AudioSlicer", "description": ":class:`AudioSlicer` segments the audio signal on the doc-level into frames on the chunk-level.", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"frame_length": {"default": 2048, "type": "number"}, "hop_length": {"default": 512, "type": "number"}}, "type": "object"}}, "type": "object"}, "Jina::Executors::AveragePrecisionEvaluator": {"additionalProperties": false, "description": "A :class:`AveragePrecisionEvaluator` evaluates the Average Precision of the search.\n       https://en.wikipedia.org/wiki/Evaluation_measures_(information_retrieval)#Average_precision", "properties": {"jtype": {"const": "AveragePrecisionEvaluator", "description": "A :class:`AveragePrecisionEvaluator` evaluates the Average Precision of the search.", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {}, "type": "object"}}, "type": "object"}, "Jina::Executors::BM25Ranker": {"additionalProperties": false, "description": ":class:`BM25Ranker` calculates the weighted score from the matched chunks.\n        The weights of each chunk is based on the tf-idf algorithm.\n        Each query chunk is considered as a ``term``,\n        and the frequency of the query chunk in a specific matched document\n        is considered as the naive ``term-frequency``.\n        All the matched results as a whole are considered as the corpus,\n        and therefore the frequency of the query chunk in all the matched docs\n        is considered as the naive ``document-frequency``.\n        Please refer to the functions for the details\n        of calculating ``tf`` and ``idf``.\n\n    :param k: the parameter ``k`` for the BM25 algorithm.\n    :param b: the parameter ``b`` for the BM25 algorithm.\n    :param args:  Additional positional arguments\n    :param kwargs: Additional keyword arguments", "properties": {"jtype": {"const": "BM25Ranker", "description": ":class:`BM25Ranker` calculates the weighted score from the matched chunks.", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"b": {"default": 0.75}, "k": {"default": 1.2}, "match_required_keys": {"default": null, "description": "Set of keys or features to be extracted from match `Document` by the `Driver` so that"}, "query_required_keys": {"default": null, "description": "Set of keys or features to be extracted from query `Document` by the `Driver` so that"}, "threshold": {"default": 0.1}}, "type": "object"}}, "type": "object"}, "Jina::Executors::BaseAudioEncoder": {"additionalProperties": false, "description": "BaseAudioEncoder encodes data from a ndarray, potentially B x (Time x D) into a ndarray of B x D", "properties": {"jtype": {"const": "BaseAudioEncoder", "description": "BaseAudioEncoder encodes data from a ndarray, potentially B x (Time x D) into a ndarray of B x D", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {}, "type": "object"}}, "type": "object"}, "Jina::Executors::BaseCache": {"additionalProperties": false, "description": "Base class of the cache inherited :class:`BaseKVIndexer`.\n\n    The difference between a cache and a :class:`BaseKVIndexer` is the ``handler_mutex`` is released in cache,\n    this allows one to query-while-indexing.", "properties": {"jtype": {"const": "BaseCache", "description": "Base class of the cache inherited :class:`BaseKVIndexer`.", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"index_filename": {"default": null, "description": "the name of the file for storing the index, when not given metas.name is used.", "type": "string"}, "key_length": {"default": 36, "type": "number"}}, "type": "object"}}, "type": "object"}, "Jina::Executors::BaseClassifier": {"additionalProperties": false, "description": "The base class of Classifier Executor. Classifier Executor allows one to\n    perform classification and regression on given input and output the predicted\n    hard/soft label.\n\n    This class should not be used directly. Subclasses should be used.", "properties": {"jtype": {"const": "BaseClassifier", "description": "The base class of Classifier Executor. Classifier Executor allows one to", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {}, "type": "object"}}, "type": "object"}, "Jina::Executors::BaseCrafter": {"additionalProperties": false, "description": "A :class:`BaseCrafter` transforms the content of `Document`.\n    It can be used for preprocessing, segmenting etc.\n    It is an interface for Crafters which is a family of executors intended to apply\n    transformations to single documents.\n    The apply function is :func:`craft`, where the name of the arguments will be used as keys of the content.\n\n    :param args:  Additional positional arguments\n    :param kwargs: Additional keyword arguments", "properties": {"jtype": {"const": "BaseCrafter", "description": "A :class:`BaseCrafter` transforms the content of `Document`.", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {}, "type": "object"}}, "type": "object"}, "Jina::Executors::BaseEmbeddingEvaluator": {"additionalProperties": false, "description": "A :class:`BaseEmbeddingEvaluator` evaluates the difference between actual and desired embeddings", "properties": {"jtype": {"const": "BaseEmbeddingEvaluator", "description": "A :class:`BaseEmbeddingEvaluator` evaluates the difference between actual and desired embeddings", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {}, "type": "object"}}, "type": "object"}, "Jina::Executors::BaseEncoder": {"additionalProperties": false, "description": "``BaseEncoder`` encodes chunk into vector representation.\n\n    The key function is :func:`encode`.\n\n    .. seealso::\n        :mod:`jina.drivers.handlers.encode`", "properties": {"jtype": {"const": "BaseEncoder", "description": "``BaseEncoder`` encodes chunk into vector representation.", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {}, "type": "object"}}, "type": "object"}, "Jina::Executors::BaseEvaluator": {"additionalProperties": false, "description": "A :class:`BaseEvaluator` is used to evaluate different messages coming from any kind of executor", "properties": {"jtype": {"const": "BaseEvaluator", "description": "A :class:`BaseEvaluator` is used to evaluate different messages coming from any kind of executor", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {}, "type": "object"}}, "type": "object"}, "Jina::Executors::BaseExecutor": {"additionalProperties": false, "description": "The base class of the executor, can be used to build encoder, indexer, etc.\n\n    Any executor inherited from :class:`BaseExecutor` always has the **meta** defined in :mod:`jina.executors.metas.defaults`.\n\n    All arguments in the :func:`__init__` can be specified with a ``with`` map in the YAML config. Example:\n\n    .. highlight:: python\n    .. code-block:: python\n\n        class MyAwesomeExecutor:\n            def __init__(awesomeness = 5):\n                pass\n\n    is equal to\n\n    .. highlight:: yaml\n    .. code-block:: yaml\n\n        !MyAwesomeExecutor\n        with:\n            awesomeness: 5\n\n    To use an executor in a :class:`jina.peapods.runtimes.zmq.zed.ZEDRuntime`,\n    a proper :class:`jina.drivers.Driver` is required. This is because the\n    executor is *NOT* protobuf-aware and has no access to the key-values in the protobuf message.\n\n    Different executor may require different :class:`Driver` with\n    proper :mod:`jina.drivers.handlers`, :mod:`jina.drivers.hooks` installed.\n\n    .. seealso::\n        Methods of the :class:`BaseExecutor` can be decorated via :mod:`jina.executors.decorators`.\n\n    .. seealso::\n        Meta fields :mod:`jina.executors.metas.defaults`.", "properties": {"jtype": {"const": "BaseExecutor", "description": "The base class of the executor, can be used to build encoder, indexer, etc.", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {}, "type": "object"}}, "type": "object"}, "Jina::Executors::BaseImageEncoder": {"additionalProperties": false, "description": "BaseImageEncoder encodes data from a ndarray, potentially B x (Height x Width) into a ndarray of B x D", "properties": {"jtype": {"const": "BaseImageEncoder", "description": "BaseImageEncoder encodes data from a ndarray, potentially B x (Height x Width) into a ndarray of B x D", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {}, "type": "object"}}, "type": "object"}, "Jina::Executors::BaseIndexer": {"additionalProperties": false, "description": "Base class for storing and searching any kind of data structure.\n\n    The key functions here are :func:`add` and :func:`query`.\n    One can decorate them with :func:`jina.decorator.require_train`,\n    :func:`jina.helper.batching` and :func:`jina.logging.profile.profiling`.\n\n    One should always inherit from either :class:`BaseVectorIndexer` or :class:`BaseKVIndexer`.\n\n    .. seealso::\n        :mod:`jina.drivers.handlers.index`\n\n    .. note::\n        Calling :func:`save` to save a :class:`BaseIndexer` will create\n        more than one files. One is the serialized version of the :class:`BaseIndexer` object, often ends with ``.bin``\n\n    .. warning::\n        When using :class:`BaseIndexer` out of the Pod, use it with context manager\n\n        .. highlight:: python\n        .. code-block:: python\n\n            with BaseIndexer() as b:\n                b.add()\n\n        So that it can safely save the data. Or you have to manually call `b.close()` to close the indexer safely.", "properties": {"jtype": {"const": "BaseIndexer", "description": "Base class for storing and searching any kind of data structure.", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"index_filename": {"default": null, "description": "the name of the file for storing the index, when not given metas.name is used.", "type": "string"}, "key_length": {"default": 36, "type": "number"}}, "type": "object"}}, "type": "object"}, "Jina::Executors::BaseKVIndexer": {"additionalProperties": false, "description": "An abstract class for key-value indexer.\n\n    All key-value indexers should inherit from it.\n\n    It can be used to tell whether an indexer is key-value indexer, via ``isinstance(a, BaseKVIndexer)``", "properties": {"jtype": {"const": "BaseKVIndexer", "description": "An abstract class for key-value indexer.", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"index_filename": {"default": null, "description": "the name of the file for storing the index, when not given metas.name is used.", "type": "string"}, "key_length": {"default": 36, "type": "number"}}, "type": "object"}}, "type": "object"}, "Jina::Executors::BaseMindsporeEncoder": {"additionalProperties": false, "description": ":class:`BaseMindsporeEncoder` is the base class for implementing Encoders with models from `mindspore`.\n\n    To implement your own executor with the :mod:`mindspore` lilbrary,\n\n    .. highlight:: python\n    .. code-block:: python\n        import mindspore.nn as nn\n\n        class YourAwesomeModel(nn.Cell):\n            def __init__(self):\n                ...\n\n            def construct(self, x):\n                ...\n\n        class YourAwesomeEncoder(BaseMindsporeEncoder):\n            def encode(self, data, *args, **kwargs):\n                from mindspore import Tensor\n                return self.model(Tensor(data)).asnumpy()\n\n            def get_cell(self):\n                return YourAwesomeModel()", "properties": {"jtype": {"const": "BaseMindsporeEncoder", "description": ":class:`BaseMindsporeEncoder` is the base class for implementing Encoders with models from `mindspore`.", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"model_path": {"default": null, "description": "the path of the model's checkpoint.", "type": "string"}}, "type": "object"}}, "type": "object"}, "Jina::Executors::BaseMultiModalEncoder": {"additionalProperties": false, "description": ":class:`BaseMultiModalEncoder` encodes data from multiple inputs (``text``, ``buffer``, ``blob`` or other ``embeddings``)\n    into a single ``embedding``", "properties": {"jtype": {"const": "BaseMultiModalEncoder", "description": ":class:`BaseMultiModalEncoder` encodes data from multiple inputs (``text``, ``buffer``, ``blob`` or other ``embeddings``)", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"positional_modality": {"default": null, "description": "the list of arguments indicating in which order the modalities they need to come"}}, "type": "object"}}, "type": "object"}, "Jina::Executors::BaseNumericEncoder": {"additionalProperties": false, "description": "BaseNumericEncoder encodes data from a ndarray, potentially B x ([T] x D) into a ndarray of B x D", "properties": {"jtype": {"const": "BaseNumericEncoder", "description": "BaseNumericEncoder encodes data from a ndarray, potentially B x ([T] x D) into a ndarray of B x D", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {}, "type": "object"}}, "type": "object"}, "Jina::Executors::BaseNumpyIndexer": {"additionalProperties": false, "description": ":class:`BaseNumpyIndexer` stores and loads vector in a compresses binary file\n\n    .. note::\n        :attr:`compress_level` balances between time and space. By default, :classL`NumpyIndexer` has\n        :attr:`compress_level` = 0.\n\n        Setting :attr:`compress_level`>0 gives a smaller file size on the disk in the index time. However, in the query\n        time it loads all data into memory at once. Not ideal for large scale application.\n\n        Setting :attr:`compress_level`=0 enables :func:`np.memmap`, which loads data in an on-demanding way and\n        gives smaller memory footprint in the query time. However, it often gives larger file size on the disk.", "properties": {"jtype": {"const": "BaseNumpyIndexer", "description": ":class:`BaseNumpyIndexer` stores and loads vector in a compresses binary file", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"compress_level": {"default": 1, "description": "The compresslevel argument is an integer from 0 to 9 controlling the", "type": "number"}, "index_filename": {"default": null, "description": "the name of the file for storing the index, when not given metas.name is used.", "type": "string"}, "key_length": {"default": 36, "type": "number"}, "ref_indexer": {"default": null, "description": "Bootstrap the current indexer from a ``ref_indexer``. This enables user to switch"}}, "type": "object"}}, "type": "object"}, "Jina::Executors::BaseOnnxEncoder": {"additionalProperties": false, "description": ":class:`BasePaddleEncoder` is the base class for implementing Encoders with models from :mod:`onnxruntime` library.\n\n    :param output_feature: the name of the layer for feature extraction.\n    :param model_path: the path of the model in the format of `.onnx`. Check a list of available pretrained\n        models at https://github.com/onnx/models#image_classification and download the git LFS to your local path.\n        The ``model_path`` is the local path of the ``.onnx`` file, e.g. ``/tmp/onnx/mobilenetv2-1.0.onnx``.", "properties": {"jtype": {"const": "BaseOnnxEncoder", "description": ":class:`BasePaddleEncoder` is the base class for implementing Encoders with models from :mod:`onnxruntime` library.", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"model_path": {"default": null, "type": "string"}, "output_feature": {"default": null, "type": "string"}}, "type": "object"}}, "type": "object"}, "Jina::Executors::BasePaddleEncoder": {"additionalProperties": false, "description": ":class:`BasePaddleEncoder` is the base class for implementing Encoders with models from :mod:`paddlepaddle` library.", "properties": {"jtype": {"const": "BasePaddleEncoder", "description": ":class:`BasePaddleEncoder` is the base class for implementing Encoders with models from :mod:`paddlepaddle` library.", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {}, "type": "object"}}, "type": "object"}, "Jina::Executors::BaseRanker": {"additionalProperties": false, "description": "The base class for a `Ranker`", "properties": {"jtype": {"const": "BaseRanker", "description": "The base class for a `Ranker`", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"match_required_keys": {"default": null, "description": "Set of keys or features to be extracted from match `Document` by the `Driver` so that"}, "query_required_keys": {"default": null, "description": "Set of keys or features to be extracted from query `Document` by the `Driver` so that"}}, "type": "object"}}, "type": "object"}, "Jina::Executors::BaseRankingEvaluator": {"additionalProperties": false, "description": "A :class:`BaseRankingEvaluator` evaluates the content of matches against the expected GroundTruth.\n    It is used to evaluate messages coming out from Indexers and Rankers and compares matches with groundtruths", "properties": {"jtype": {"const": "BaseRankingEvaluator", "description": "A :class:`BaseRankingEvaluator` evaluates the content of matches against the expected GroundTruth.", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {}, "type": "object"}}, "type": "object"}, "Jina::Executors::BaseSegmenter": {"additionalProperties": false, "description": ":class:`BaseSegmenter` works on doc-level,\n        it chunks Documents into set of Chunks", "properties": {"jtype": {"const": "BaseSegmenter", "description": ":class:`BaseSegmenter` works on doc-level,", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {}, "type": "object"}}, "type": "object"}, "Jina::Executors::BaseTFEncoder": {"additionalProperties": false, "description": ":class:`BasePaddleEncoder` is the base class for implementing Encoders with models from :mod:`tensorflow` library.", "properties": {"jtype": {"const": "BaseTFEncoder", "description": ":class:`BasePaddleEncoder` is the base class for implementing Encoders with models from :mod:`tensorflow` library.", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {}, "type": "object"}}, "type": "object"}, "Jina::Executors::BaseTextEncoder": {"additionalProperties": false, "description": "BaseTextEncoder encodes data from an array of string type (data.dtype.kind == 'U') of size B into a ndarray of B x D.", "properties": {"jtype": {"const": "BaseTextEncoder", "description": "BaseTextEncoder encodes data from an array of string type (data.dtype.kind == 'U') of size B into a ndarray of B x D.", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {}, "type": "object"}}, "type": "object"}, "Jina::Executors::BaseTextEvaluator": {"additionalProperties": false, "description": "A :class:`BaseTextEvaluator` evaluates the difference between actual and desired text", "properties": {"jtype": {"const": "BaseTextEvaluator", "description": "A :class:`BaseTextEvaluator` evaluates the difference between actual and desired text", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {}, "type": "object"}}, "type": "object"}, "Jina::Executors::BaseTorchEncoder": {"additionalProperties": false, "description": "Base encoder class for :mod:`pytorch` library.", "properties": {"jtype": {"const": "BaseTorchEncoder", "description": "Base encoder class for :mod:`pytorch` library.", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {}, "type": "object"}}, "type": "object"}, "Jina::Executors::BaseVectorIndexer": {"additionalProperties": false, "description": "An abstract class for vector indexer. It is equipped with drivers in ``requests.on``\n\n    All vector indexers should inherit from it.\n\n    It can be used to tell whether an indexer is vector indexer, via ``isinstance(a, BaseVectorIndexer)``", "properties": {"jtype": {"const": "BaseVectorIndexer", "description": "An abstract class for vector indexer. It is equipped with drivers in ``requests.on``", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"index_filename": {"default": null, "description": "the name of the file for storing the index, when not given metas.name is used.", "type": "string"}, "key_length": {"default": 36, "type": "number"}}, "type": "object"}}, "type": "object"}, "Jina::Executors::BaseVideoEncoder": {"additionalProperties": false, "description": "BaseVideoEncoder encodes data from a ndarray, potentially B x (Time x Height x Width) into a ndarray of B x D", "properties": {"jtype": {"const": "BaseVideoEncoder", "description": "BaseVideoEncoder encodes data from a ndarray, potentially B x (Time x Height x Width) into a ndarray of B x D", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {}, "type": "object"}}, "type": "object"}, "Jina::Executors::BiMatchRanker": {"additionalProperties": false, "description": "The :class:`BiMatchRanker` counts the best chunk-hit from both query and doc perspective.\n\n    .. warning:: Here we suppose that the smaller chunk score means the more similar.", "properties": {"jtype": {"const": "BiMatchRanker", "description": "The :class:`BiMatchRanker` counts the best chunk-hit from both query and doc perspective.", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"match_required_keys": {"default": null, "description": "Set of keys or features to be extracted from match `Document` by the `Driver` so that"}, "query_required_keys": {"default": null, "description": "Set of keys or features to be extracted from query `Document` by the `Driver` so that"}}, "type": "object"}}, "type": "object"}, "Jina::Executors::BigTransferEncoder": {"additionalProperties": false, "description": ":class:`BigTransferEncoder` is Big Transfer (BiT) presented by Google (https://github.com/google-research/big_transfer),\n    this class use pretrained BiT to encode data from a ndarray, potentially B x (Channel x Height x Width) into a\n    ndarray of `B x D`.\n    Internally, :class:`BigTransferEncoder` wraps the models from https://storage.googleapis.com/bit_models/.\n    More about BiTImageEncoder:\n\n    .. warning::\n\n        Known issue: this does not work on tensorflow==2.2.0, https://github.com/tensorflow/tensorflow/issues/38571", "properties": {"jtype": {"const": "BigTransferEncoder", "description": ":class:`BigTransferEncoder` is Big Transfer (BiT) presented by Google (https://github.com/google-research/big_transfer),", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"channel_axis": {"default": 1, "description": "the axis id of the channel, -1 indicate the color channel info at the last axis.", "type": "number"}, "model_path": {"default": "/workspace/pretrained", "description": "the path of the model in the `SavedModel` format. `model_path` should be a directory path,", "type": "string"}}, "type": "object"}}, "type": "object"}, "Jina::Executors::BinaryPbIndexer": {"additionalProperties": false, "description": "Simple Key-value indexer.", "properties": {"jtype": {"const": "BinaryPbIndexer", "description": "Simple Key-value indexer.", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"index_filename": {"default": null, "description": "the name of the file for storing the index, when not given metas.name is used.", "type": "string"}, "key_length": {"default": 36, "type": "number"}}, "type": "object"}}, "type": "object"}, "Jina::Executors::BleuEvaluator": {"additionalProperties": false, "description": ":class:`BleuEvaluator`Bilingual Evaluation Understudy Score. \n    Evaluates the generated sentence (actual) against a desired sentence. \n    It will use the Bleu on NLTK package.\n    A perfect match will score 1.0 and a complete mismatch will score 0.0\n\n    The NLTK library can score n-gram individually or cummulative.\n    Here we use the cumulative as it is more precise.\n    https://machinelearningmastery.com/calculate-bleu-score-for-text-python/", "properties": {"jtype": {"const": "BleuEvaluator", "description": ":class:`BleuEvaluator`Bilingual Evaluation Understudy Score. ", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {}, "type": "object"}}, "type": "object"}, "Jina::Executors::CenterImageCropper": {"additionalProperties": false, "description": "Crop the image with the center crop box.\n\n    The coordinate is the same coordinate-system in the\n        :py:mode:`PIL.Image`.\n\n    :param target_size: Desired output size. If size\n        is a sequence like (h, w), the output size will\n        be matched to this. If size is an int, the\n        output will have the same height and width as\n        the `target_size`.\n    :param channel_axis: Axis for channel\n    :param args:  Additional positional arguments\n    :param kwargs: Additional keyword arguments", "properties": {"jtype": {"const": "CenterImageCropper", "description": "Crop the image with the center crop box.", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"channel_axis": {"default": -1, "type": "number"}, "target_size": {"default": 224}}, "type": "object"}}, "type": "object"}, "Jina::Executors::ChromaPitchEncoder": {"additionalProperties": false, "description": "Segment  audio signal into short chroma frames.\n\n    :class:`ChromaPitchEncoder` is based on chroma spectrograms\n    (chromagrams) which represent melodic/harmonic features.\n    :class:`ChromaPitchEncoder` encodes an audio signal from a\n    `Batch x Signal Length` ndarray into a\n    `Batch x Concatenated Features` ndarray.\n\n    :param input_sample_rate: input sampling rate in Hz\n        (22050 by default)\n    :param hop_length: the number of samples between\n        successive chroma frames (512 by default)\n    :param args:  Additional positional arguments\n    :param kwargs: Additional keyword arguments", "properties": {"jtype": {"const": "ChromaPitchEncoder", "description": "Segment  audio signal into short chroma frames.", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"hop_length": {"default": 512, "type": "number"}, "input_sample_rate": {"default": 22050, "type": "number"}}, "type": "object"}}, "type": "object"}, "Jina::Executors::Chunk2DocRanker": {"additionalProperties": false, "description": "A :class:`Chunk2DocRanker` translates the chunk-wise score (distance) to the doc-wise score.\n\n    In the query-time, :class:`Chunk2DocRanker` is an almost-always required component.\n    Because in the end we want to retrieve top-k documents of given query-document not top-k chunks of\n    given query-chunks. The purpose of :class:`Chunk2DocRanker` is to aggregate the already existed top-k chunks\n    into documents.\n\n    The key function here is :func:`score`.\n\n    .. seealso::\n        :mod:`jina.drivers.handlers.score`", "properties": {"jtype": {"const": "Chunk2DocRanker", "description": "A :class:`Chunk2DocRanker` translates the chunk-wise score (distance) to the doc-wise score.", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"match_required_keys": {"default": null, "description": "Set of keys or features to be extracted from match `Document` by the `Driver` so that"}, "query_required_keys": {"default": null, "description": "Set of keys or features to be extracted from query `Document` by the `Driver` so that"}}, "type": "object"}}, "type": "object"}, "Jina::Executors::CompoundExecutor": {"additionalProperties": false, "description": "A :class:`CompoundExecutor` is a set of multiple executors.\n    The most common usage is chaining a pipeline of executors, where the\n    input of the current is the output of the former.\n\n    A common use case of :class:`CompoundExecutor` is to glue multiple :class:`BaseExecutor` together, instead of breaking them into different Pods.\n\n    **Example 1: a compound Chunk Indexer that does vector indexing and key-value index**\n\n    .. highlight:: yaml\n    .. code-block:: yaml\n\n        !CompoundExecutor\n        components:\n          - !NumpyIndexer\n            with:\n              index_filename: vec.gz\n            metas:\n              name: vecidx_exec  # a customized name\n              workspace: ${{TEST_WORKDIR}}\n          - !BinaryPbIndexer\n            with:\n              index_filename: chunk.gz\n            metas:\n              name: chunkidx_exec\n              workspace: ${{TEST_WORKDIR}}\n        metas:\n          name: chunk_compound_indexer\n          workspace: ${{TEST_WORKDIR}}\n        requests:\n          on:\n            SearchRequest:\n              - !VectorSearchDriver\n                with:\n                  executor: vecidx_exec\n            IndexRequest:\n              - !VectorIndexDriver\n                with:\n                  executor: vecidx_exec\n            ControlRequest:\n              - !ControlReqDriver {}\n\n    **Example 2: a compound crafter that first craft the doc and then segment **\n\n    .. highlight:: yaml\n    .. code-block:: yaml\n\n        !CompoundExecutor\n        components:\n          - !GifNameRawSplit\n            metas:\n              name: name_split  # a customized name\n              workspace: ${{TEST_WORKDIR}}\n          - !GifPreprocessor\n            with:\n              every_k_frame: 2\n              from_buffer: true\n            metas:\n              name: gif2chunk_preprocessor  # a customized name\n        metas:\n          name: compound_crafter\n          workspace: ${{TEST_WORKDIR}}\n          py_modules: gif2chunk.py\n        requests:\n          on:\n            IndexRequest:\n              - !DocCraftDriver\n                with:\n                  executor: name_split\n              - !SegmentDriver\n                with:\n                  executor: gif2chunk_preprocessor\n            ControlRequest:\n              - !ControlReqDriver {}\n\n\n    One can access the component of a :class:`CompoundExecutor` via index, e.g.\n\n    .. highlight:: python\n    .. code-block:: python\n\n        c = BaseExecutor.load_config('compound-example.yaml')\n        assertTrue(c[0] == c['dummyA-1ef90ea8'])\n        c[0].add(obj)\n\n    .. note::\n        Component ``workspace`` and ``pea_id`` are overriden by their :class:`CompoundExecutor` counterparts.\n\n    .. warning::\n\n        When sub-component is external, ``py_modules`` must be given at root level ``metas`` not at the sub-level.", "properties": {"components": {"$ref": "#/definitions/Jina::Executors::All"}, "jtype": {"const": "CompoundExecutor", "description": "A :class:`CompoundExecutor` is a set of multiple executors.", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"resolve_all": {"default": true, "description": "universally add ``*_all()`` to all functions that have the identical name", "type": "boolean"}, "routes": {"default": null, "description": "a map of function routes. The key is the function name, the value is a tuple of two pieces,", "type": "object"}}, "type": "object"}}, "type": "object"}, "Jina::Executors::CompoundIndexer": {"additionalProperties": false, "description": "A Frequently used pattern for combining A :class:`BaseVectorIndexer` and :class:`BaseKVIndexer`.\n    It will be equipped with predefined ``requests.on`` behaviors:\n\n        -  In the index time\n            - 1. stores the vector via :class:`BaseVectorIndexer`\n            - 2. remove all vector information (embedding, buffer, blob, text)\n            - 3. store the remained meta information via :class:`BaseKVIndexer`\n        - In the query time\n            - 1. Find the knn using the vector via :class:`BaseVectorIndexer`\n            - 2. remove all vector information (embedding, buffer, blob, text)\n            - 3. Fill in the meta information of the document via :class:`BaseKVIndexer`\n\n    One can use the :class:`ChunkIndexer` via\n\n    .. highlight:: yaml\n    .. code-block:: yaml\n\n        !ChunkIndexer\n        components:\n          - !NumpyIndexer\n            with:\n              index_filename: vec.gz\n            metas:\n              name: vecidx  # a customized name\n              workspace: ${{TEST_WORKDIR}}\n          - !BinaryPbIndexer\n            with:\n              index_filename: chunk.gz\n            metas:\n              name: chunkidx  # a customized name\n              workspace: ${{TEST_WORKDIR}}\n        metas:\n          name: chunk_compound_indexer\n          workspace: ${{TEST_WORKDIR}}\n\n    Without defining any ``requests.on`` logic. When load from this YAML, it will be auto equipped with\n\n    .. highlight:: yaml\n    .. code-block:: yaml\n\n        on:\n          SearchRequest:\n            - !VectorSearchDriver\n              with:\n                executor: BaseVectorIndexer\n            - !PruneDriver\n              with:\n                pruned:\n                  - embedding\n                  - buffer\n                  - blob\n                  - text\n            - !KVSearchDriver\n              with:\n                executor: BaseKVIndexer\n            IndexRequest:\n            - !VectorIndexDriver\n              with:\n                executor: BaseVectorIndexer\n            - !PruneDriver\n              with:\n                pruned:\n                  - embedding\n                  - buffer\n                  - blob\n                  - text\n            - !KVIndexDriver\n              with:\n                executor: BaseKVIndexer\n          ControlRequest:\n            - !ControlReqDriver {}", "properties": {"jtype": {"const": "CompoundIndexer", "description": "A Frequently used pattern for combining A :class:`BaseVectorIndexer` and :class:`BaseKVIndexer`.", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"resolve_all": {"default": true, "description": "universally add ``*_all()`` to all functions that have the identical name", "type": "boolean"}, "routes": {"default": null, "description": "a map of function routes. The key is the function name, the value is a tuple of two pieces,", "type": "object"}}, "type": "object"}}, "type": "object"}, "Jina::Executors::CompressionVaeEncoder": {"additionalProperties": false, "description": ":class:`CompressionVaeEncoder` is a dimensionality reduction tool based on the idea of\n    Variational Autoencoders. It encodes data from an ndarray in size `B x T` into an ndarray in size `B x D`.\n\n    Full code and documentation can be found here: https://github.com/maxfrenzel/CompressionVAE..", "properties": {"jtype": {"const": "CompressionVaeEncoder", "description": ":class:`CompressionVaeEncoder` is a dimensionality reduction tool based on the idea of", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"model_path": {"default": "model", "description": "specifies the path to the pretrained model", "type": "string"}}, "type": "object"}}, "type": "object"}, "Jina::Executors::CosineEvaluator": {"additionalProperties": false, "description": "A :class:`CosineEvaluator` evaluates the distance between actual and desired embeddings computing\n    the cosine distance between them. (The smaller value the closest distance, it is not cosine similarity measure)\n\n    .. math::\n\n        1 - \\frac{u \\cdot v}\n                  {||u||_2 ||v||_2}.", "properties": {"jtype": {"const": "CosineEvaluator", "description": "A :class:`CosineEvaluator` evaluates the distance between actual and desired embeddings computing", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {}, "type": "object"}}, "type": "object"}, "Jina::Executors::CustomImageTorchEncoder": {"additionalProperties": false, "description": ":class:`CustomImageTorchEncoder` encodes data from a ndarray, potentially B x (Channel x Height x Width) into a\n        ndarray of `B x D`.\n    Internally, :class:`CustomImageTorchEncoder` wraps any custom torch model not part of models from `torchvision.models`.\n    https://pytorch.org/docs/stable/torchvision/models.html", "properties": {"jtype": {"const": "CustomImageTorchEncoder", "description": ":class:`CustomImageTorchEncoder` encodes data from a ndarray, potentially B x (Channel x Height x Width) into a", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"channel_axis": {"default": 1, "type": "number"}, "layer_name": {"default": "features", "type": "string"}, "model_path": {"default": "models/mobilenet_v2.pth", "description": "the path where the model is stored.", "type": "string"}, "pool_strategy": {"default": "mean", "type": "string"}}, "type": "object"}}, "type": "object"}, "Jina::Executors::CustomKerasImageEncoder": {"additionalProperties": false, "description": ":class:`CustomImageKerasEncoder` encodes data from a ndarray, potentially B x (Channel x Height x Width) into a\n        ndarray of `B x D`.\n    Internally, :class:`CustomImageKerasEncoder` wraps any custom tf.keras model not part of models from `tensorflow.keras.applications`.\n    https://www.tensorflow.org/api_docs/python/tf/keras/applications", "properties": {"jtype": {"const": "CustomKerasImageEncoder", "description": ":class:`CustomImageKerasEncoder` encodes data from a ndarray, potentially B x (Channel x Height x Width) into a", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"channel_axis": {"default": 1, "type": "number"}, "layer_name": {"default": "global_average_pooling2d", "type": "string"}, "model_path": {"default": "models/mobilenet_v2.h5", "description": "the path where the model is stored.", "type": "string"}}, "type": "object"}}, "type": "object"}, "Jina::Executors::DataURIPbIndexer": {"additionalProperties": false, "description": "Alias for BinaryPbIndexer", "properties": {"jtype": {"const": "DataURIPbIndexer", "description": "Alias for BinaryPbIndexer", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"index_filename": {"default": null, "description": "the name of the file for storing the index, when not given metas.name is used.", "type": "string"}, "key_length": {"default": 36, "type": "number"}}, "type": "object"}}, "type": "object"}, "Jina::Executors::DeepSegmenter": {"additionalProperties": false, "description": "Designed with ASR outputs in mind, DeepSegment uses BiLSTM +\n    CRF for automatic sentence boundary detection.\n    It outperforms the standard libraries (spacy, nltk, corenlp ..)\n    on imperfect text, and performs similarly for perfectly punctuated text.\n\n    Example: 'I am Batman i live in gotham'\n            ->  # ['I am Batman', 'i live in gotham']\n\n    Details: https://github.com/notAI-tech/deepsegment\n\n    :param lang_code: en - english (Trained on data from various sources);\n        fr - french (Only Tatoeba data); it - italian (Only Tatoeba data)\n    :type lang_code: str\n    :param checkpoint_name: Name to be used as checkpoint\n    :type checkpoint_name: str\n    :param args:  Additional positional arguments\n    :param kwargs: Additional keyword arguments", "properties": {"jtype": {"const": "DeepSegmenter", "description": "Designed with ASR outputs in mind, DeepSegment uses BiLSTM +", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"checkpoint_name": {"default": null, "type": "string"}, "lang_code": {"default": "en", "type": "string"}}, "type": "object"}}, "type": "object"}, "Jina::Executors::DocCache": {"additionalProperties": false, "description": "A key-value indexer that specializes in caching.\n\n    Serializes the cache to two files, one for ids, one for the actually cached field.\n    If fields=[\"id\"], then the second file is redundant. The class optimizes the process\n    so that there are no duplicates.\n\n    Order of fields does NOT affect the caching.\n\n    :param index_filename: file name for storing the cache data\n    :param fields: fields to cache on (of Document)\n    :param *args: *args for super\n    :param **kwargs: **kwargs for super", "properties": {"jtype": {"const": "DocCache", "description": "A key-value indexer that specializes in caching.", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"fields": {"default": null, "type": "string"}, "index_filename": {"default": null, "description": "the name of the file for storing the index, when not given metas.name is used.", "type": "string"}, "key_length": {"default": 36, "type": "number"}}, "type": "object"}}, "type": "object"}, "Jina::Executors::EditDistanceEvaluator": {"additionalProperties": false, "description": ":class:`EditDistanceEvaluator` Gives the edit distance between result and groundtruth string..", "properties": {"jtype": {"const": "EditDistanceEvaluator", "description": ":class:`EditDistanceEvaluator` Gives the edit distance between result and groundtruth string..", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {}, "type": "object"}}, "type": "object"}, "Jina::Executors::EuclideanEvaluator": {"additionalProperties": false, "description": "A :class:`EuclideanEvaluator` evaluates the distance between actual and desired embeddings computing\n    the euclidean distance between them", "properties": {"jtype": {"const": "EuclideanEvaluator", "description": "A :class:`EuclideanEvaluator` evaluates the distance between actual and desired embeddings computing", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {}, "type": "object"}}, "type": "object"}, "Jina::Executors::FScoreEvaluator": {"additionalProperties": false, "description": ":class:`FScoreEvaluator` Gives the f score of a search system result. (https://en.wikipedia.org/wiki/F-score)\n\n    :param eval_at: the point at which precision and recall are computed, if None give, will consider all the input to evaluate\n    :param beta: Parameter to weight differently precision and recall. When beta is 1, the fScore corresponds to the harmonic mean\n        of precision and recall\n    :param args: Additional positional arguments\n    :param kwargs: Additional keyword arguments", "properties": {"jtype": {"const": "FScoreEvaluator", "description": ":class:`FScoreEvaluator` Gives the f score of a search system result. (https://en.wikipedia.org/wiki/F-score)", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"beta": {"default": 1, "type": "number"}, "eval_at": {"default": null, "type": "number"}}, "type": "object"}}, "type": "object"}, "Jina::Executors::FaissIndexer": {"additionalProperties": false, "description": "", "properties": {"jtype": {"const": "FaissIndexer", "description": "", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"compress_level": {"default": 1, "description": "The compresslevel argument is an integer from 0 to 9 controlling the", "type": "number"}, "distance": {"default": "l2", "description": "'l2' or 'inner_product' accepted. Determines which distances to optimize by FAISS. l2...smaller is better, inner_product...larger is better", "type": "string"}, "index_filename": {"default": null, "description": "the name of the file for storing the index, when not given metas.name is used.", "type": "string"}, "index_key": {"default": null, "description": "index type supported by ``faiss.index_factory``", "type": "string"}, "key_length": {"default": 36, "type": "number"}, "max_num_training_points": {"default": null, "description": "Optional argument to consider only a subset of training points to training data from `train_filepath`.", "type": "number"}, "normalize": {"default": false, "description": "whether or not to normalize the vectors e.g. for the cosine similarity https://github.com/facebookresearch/faiss/wiki/MetricType-and-distances#how-can-i-index-vectors-for-cosine-similarity", "type": "boolean"}, "nprobe": {"default": 1, "description": "Number of clusters to consider at search time.", "type": "number"}, "ref_indexer": {"default": null, "description": "Bootstrap the current indexer from a ``ref_indexer``. This enables user to switch"}, "requires_training": {"default": true, "description": "Boolean flag indicating if the index type requires training to be run before building index.", "type": "boolean"}, "train_filepath": {"default": null, "description": "the training data file path, e.g ``faiss.tgz`` or `faiss.npy`. The data file is expected", "type": "string"}}, "type": "object"}}, "type": "object"}, "Jina::Executors::FarmTextEncoder": {"additionalProperties": false, "description": "Encode an array of string in size `B` into an ndarray in size `B x D`\n\n    The ndarray potentially is BatchSize x (Channel x Height x Width)\n            into an ndarray in size `B x D`. Where `D` is the Dimension.\n\n    FARM-based text encoder: (Framework for Adapting Representation Models)\n    https://github.com/deepset-ai/FARM\n\n    :param model_name_or_path: Directory or public name of the model to load.\n    :param num_processes: Number of processes for `multiprocessing.Pool`.\n        Set to value of 0 to disable multiprocessing. Set to None to let\n        Inferencer use all CPU cores. If you want to debug the Language Model,\n        you might need to disable multiprocessing\n    :param extraction_strategy: Strategy to extract vectors. Choices:\n        'cls_token' (sentence vector), 'reduce_mean'(sentence vector),\n        reduce_max (sentence vector), 'per_token' (individual token vectors)\n    :param extraction_layer: number of layer from which the embeddings shall\n        be extracted. Default: -1 (very last layer).\n    :param args:  Additional positional arguments\n    :param kwargs: Additional keyword arguments", "properties": {"jtype": {"const": "FarmTextEncoder", "description": "Encode an array of string in size `B` into an ndarray in size `B x D`", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"extraction_layer": {"default": -1, "type": "number"}, "extraction_strategy": {"default": "cls_token", "type": "string"}, "num_processes": {"default": 0, "type": "number"}, "pretrained_model_name_or_path": {"default": "deepset/bert-base-cased-squad2", "type": "string"}}, "type": "object"}}, "type": "object"}, "Jina::Executors::FastICAEncoder": {"additionalProperties": false, "description": ":class:`FastICAEncoder` encodes data from an ndarray in size `B x T` into an ndarray in size `B x D`.\n\n    .. note::\n        :class:`FastICAEncoder` must be trained before calling ``encode()``.", "properties": {"jtype": {"const": "FastICAEncoder", "description": ":class:`FastICAEncoder` encodes data from an ndarray in size `B x T` into an ndarray in size `B x D`.", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"max_iter": {"default": 200, "type": "number"}, "model_path": {"default": null, "description": "path from where to pickle the sklearn model.", "type": "string"}, "num_features": {"default": null, "description": "the number of input features.  If ``num_features`` is None, then ``num_features`` is", "type": "number"}, "output_dim": {"default": 64, "type": "number"}, "random_state": {"default": 2020, "type": "number"}, "whiten": {"default": false, "description": "If whiten is false, the data is already considered to be whitened, and no whitening is performed.", "type": "boolean"}}, "type": "object"}}, "type": "object"}, "Jina::Executors::FeatureAgglomerationEncoder": {"additionalProperties": false, "description": ":class:`FeatureAgglomerationEncoder` encodes data from an ndarray in size `B x T` into an ndarray in size `B x D`\n    https://scikit-learn.org/stable/modules/generated/sklearn.cluster.FeatureAgglomeration.html", "properties": {"jtype": {"const": "FeatureAgglomerationEncoder", "description": ":class:`FeatureAgglomerationEncoder` encodes data from an ndarray in size `B x T` into an ndarray in size `B x D`", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"model_path": {"default": null, "description": "path from where to pickle the sklearn model.", "type": "string"}, "output_dim": {"default": 64, "type": "number"}, "random_state": {"default": 2020, "type": "number"}}, "type": "object"}}, "type": "object"}, "Jina::Executors::FileBasedEvaluator": {"additionalProperties": false, "description": "A Frequently used pattern for combining A :class:`BinaryPbIndexer` and :class:`BaseEvaluator`.\n     It will be equipped with predefined ``requests.on`` behaviors:\n\n         -  At evaluation time(query or index)\n             - 1. Checks for the incoming document, gets its value from the `BinaryPbIndexer` and fills the `groundtruth of the request\n             - 2. Filter the documents that do not have a corresponding groundtruth\n             - 3. The BaseEvaluator works as if the `groundtruth` had been provided by the client as it comes in the request.\n\n    .. warning::\n        The documents that are not found to have an indexed groundtruth are removed from the `request` so that the `Evaluator` only\n        works with documents which have groundtruth.\n\n     One can use the :class:`FileBasedEvaluator` via\n\n     .. highlight:: yaml\n     .. code-block:: yaml\n\n         !FileBasedEvaluator\n         components:\n           - !BinaryPbIndexer\n             with:\n               index_filename: ground_truth.gz\n             metas:\n               name: groundtruth_index  # a customized name\n               workspace: ${{TEST_WORKDIR}}\n           - !BaseEvaluator\n\n     Without defining any ``requests.on`` logic. When load from this YAML, it will be auto equipped with\n\n     .. highlight:: yaml\n     .. code-block:: yaml\n\n         on:\n           [SearchRequest, IndexRequest]:\n             - !LoadGroundTruthDriver\n               with:\n                 executor: BaseKVIndexer\n             - !BaseEvaluateDriver\n               with:\n                 executor: BaseEvaluator\n           ControlRequest:\n             - !ControlReqDriver {}", "properties": {"jtype": {"const": "FileBasedEvaluator", "description": "A Frequently used pattern for combining A :class:`BinaryPbIndexer` and :class:`BaseEvaluator`.", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"resolve_all": {"default": true, "description": "universally add ``*_all()`` to all functions that have the identical name", "type": "boolean"}, "routes": {"default": null, "description": "a map of function routes. The key is the function name, the value is a tuple of two pieces,", "type": "object"}}, "type": "object"}}, "type": "object"}, "Jina::Executors::FiveImageCropper": {"additionalProperties": false, "description": ":class:`FiveImageCropper` crops the image into four corners and the central crop.\n\n    :param target_size: desired output size. If size is a sequence like (h, w),\n        the output size will be matched to this. If size is an int,\n        the output will have the same height and width as the `target_size`.\n    :param channel_axis: Axis for channel\n    :param args:  Additional positional arguments\n    :param kwargs: Additional keyword arguments", "properties": {"jtype": {"const": "FiveImageCropper", "description": ":class:`FiveImageCropper` crops the image into four corners and the central crop.", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"channel_axis": {"default": -1, "type": "number"}, "target_size": {"default": 224}}, "type": "object"}}, "type": "object"}, "Jina::Executors::FlairTextEncoder": {"additionalProperties": false, "description": "Encode an array of string in size `B` into an ndarray in size `B x D`\n\n    The ndarray potentially is BatchSize x (Channel x Height x Width)\n\n    Internally, :class:`FlairTextEncoder` wraps the DocumentPoolEmbeddings from Flair.\n\n    :param embeddings: the name of the embeddings. Supported models include\n        - ``word:[ID]``: the classic word embedding model, the ``[ID]`` are listed at\n        https://github.com/flairNLP/flair/blob/master/resources/docs/embeddings/CLASSIC_WORD_EMBEDDINGS.md\n        - ``flair:[ID]``: the contextual embedding model, the ``[ID]`` are listed at\n        https://github.com/flairNLP/flair/blob/master/resources/docs/embeddings/FLAIR_EMBEDDINGS.md\n        - ``pooledflair:[ID]``: the pooled version of the contextual embedding model,\n        the ``[ID]`` are listed at\n        https://github.com/flairNLP/flair/blob/master/resources/docs/embeddings/FLAIR_EMBEDDINGS.md\n        - ``byte-pair:[ID]``: the subword-level embedding model, the ``[ID]`` are listed at\n        https://github.com/flairNLP/flair/blob/master/resources/docs/embeddings/BYTE_PAIR_EMBEDDINGS.md\n        - ``Example``: ('word:glove', 'flair:news-forward', 'flair:news-backward')\n\n    :param pooling_strategy: the strategy to merge the word embeddings into the chunk embedding.\n    Supported strategies include ``mean``, ``min``, ``max``.", "properties": {"jtype": {"const": "FlairTextEncoder", "description": "Encode an array of string in size `B` into an ndarray in size `B x D`", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"embeddings": {"default": ["word:glove"]}, "pooling_strategy": {"default": "mean", "type": "string"}}, "type": "object"}}, "type": "object"}, "Jina::Executors::GleuEvaluator": {"additionalProperties": false, "description": ":class:`GleuEvaluator` Evaluate GLEU score between acutal and ground truth.\n    It will use the Gleu on NLTK package.\n    A perfect match will score 1.0 and a complete mismatch will score 0.0", "properties": {"jtype": {"const": "GleuEvaluator", "description": ":class:`GleuEvaluator` Evaluate GLEU score between acutal and ground truth.", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {}, "type": "object"}}, "type": "object"}, "Jina::Executors::HammingDistanceEvaluator": {"additionalProperties": false, "description": "A:class:`HammingDistanceEvaluator` Gives the Hamming distance between result and groundtruth string..", "properties": {"jtype": {"const": "HammingDistanceEvaluator", "description": "A:class:`HammingDistanceEvaluator` Gives the Hamming distance between result and groundtruth string..", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {}, "type": "object"}}, "type": "object"}, "Jina::Executors::ImageCropper": {"additionalProperties": false, "description": "Crop the image with the specific crop box.\n\n    The coordinate is the same coordinate-system in\n        the :py:mode:`PIL.Image`.\n\n    :param top: the vertical coordinate of the top left\n        corner of the crop box.\n    :param left: the horizontal coordinate of the top\n        left corner of the crop box.\n    :param height: the height of the crop box.\n    :param width: the width of the crop box.\n    :param channel_axis: the axis referring to the channels\n    :param args:  Additional positional arguments\n    :param kwargs: Additional keyword arguments", "properties": {"jtype": {"const": "ImageCropper", "description": "Crop the image with the specific crop box.", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"channel_axis": {"default": -1, "type": "number"}, "height": {"default": 224, "type": "number"}, "left": {"default": 0, "type": "number"}, "top": {"default": 0, "type": "number"}, "width": {"default": 224, "type": "number"}}, "type": "object"}}, "type": "object"}, "Jina::Executors::ImageFlipper": {"additionalProperties": false, "description": "Flip the image horizontally or vertically.\n\n    Flip image in the left/right or up/down direction respectively.\n\n    :param vertical: desired rotation type.\n        ``True`` indicates the image should be flipped vertically.\n    :param channel_axis: the axis id of the color channel, ``-1``\n        indicates the color channel info at the last axis.\n    :param args:  Additional positional arguments\n    :param kwargs: Additional keyword arguments", "properties": {"jtype": {"const": "ImageFlipper", "description": "Flip the image horizontally or vertically.", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"channel_axis": {"default": -1, "type": "number"}, "vertical": {"default": false, "type": "boolean"}}, "type": "object"}}, "type": "object"}, "Jina::Executors::ImageKerasEncoder": {"additionalProperties": false, "description": ":class:`ImageKerasEncoder` encodes data from a ndarray, potentially B x (Channel x Height x Width) into a\n        ndarray of `B x D`.\n    Internally, :class:`ImageKerasEncoder` wraps the models from `tensorflow.keras.applications`.\n    https://keras.io/applications/", "properties": {"jtype": {"const": "ImageKerasEncoder", "description": ":class:`ImageKerasEncoder` encodes data from a ndarray, potentially B x (Channel x Height x Width) into a", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"channel_axis": {"default": 1, "description": "the axis id of the channel, -1 indicate the color channel info at the last axis.", "type": "number"}, "img_shape": {"default": 96, "type": "number"}, "model_name": {"default": null, "description": "the name of the model. Supported models include", "type": "string"}, "pool_strategy": {"default": "avg", "description": "the pooling strategy", "type": "string"}}, "type": "object"}}, "type": "object"}, "Jina::Executors::ImageNormalizer": {"additionalProperties": false, "description": "Normalize the image.\n\n    :class:`ImageNormalizer` works on doc-level,\n        it receives values of file names on the\n        doc-level and returns image matrix on the chunk-level\n\n    :param target_size: Desired output size. If size is a sequence\n        like (h, w), the output size will be matched to this.\n        If size is an int, the smaller edge of the image will be matched\n        to this number maintaining the aspect ratio.\n    :param img_mean: The mean of the images in `RGB` channels.\n        Set to `[0.485, 0.456, 0.406]` for the models trained\n        on `imagenet` with pytorch backbone.\n    :param img_std: the std of the images in `RGB` channels.\n        Set to `[0.229, 0.224, 0.225]` for the models trained\n        on `imagenet` with pytorch backbone.\n    :param resize_dim: the size of images' height and width to be resized to.\n        The images are resized before cropping to the output size\n    :param channel_axis: the axis id of the color channel,\n        ``-1`` indicates the color channel info at the last axis", "properties": {"jtype": {"const": "ImageNormalizer", "description": "Normalize the image.", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"channel_axis": {"default": -1, "type": "number"}, "img_mean": {"default": [0, 0, 0], "type": "array"}, "img_std": {"default": [1, 1, 1], "type": "array"}, "resize_dim": {"default": 256, "type": "number"}, "target_size": {"default": 224}}, "type": "object"}}, "type": "object"}, "Jina::Executors::ImageOnnxEncoder": {"additionalProperties": false, "description": ":class:`ImageOnnxEncoder` encodes data from a ndarray, potentially B x (Channel x Height x Width) into a\n        ndarray of `B x D`.\n    Internally, :class:`OnnxImageEncoder` wraps the models from `onnxruntime`.", "properties": {"jtype": {"const": "ImageOnnxEncoder", "description": ":class:`ImageOnnxEncoder` encodes data from a ndarray, potentially B x (Channel x Height x Width) into a", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"model_path": {"default": null, "type": "string"}, "output_feature": {"default": null, "type": "string"}, "pool_strategy": {"default": "mean", "description": "the pooling strategy", "type": "string"}}, "type": "object"}}, "type": "object"}, "Jina::Executors::ImagePaddlehubEncoder": {"additionalProperties": false, "description": ":class:`ImagePaddlehubEncoder` encodes data from a ndarray, potentially B x (Channel x Height x Width) into a\n        ndarray of `B x D`.\n    Internally, :class:`ImagePaddlehubEncoder` wraps the models from `paddlehub`.\n    https://github.com/PaddlePaddle/PaddleHub", "properties": {"jtype": {"const": "ImagePaddlehubEncoder", "description": ":class:`ImagePaddlehubEncoder` encodes data from a ndarray, potentially B x (Channel x Height x Width) into a", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"channel_axis": {"default": -3, "type": "number"}, "model_name": {"default": null, "description": "the name of the model. Supported models include", "type": "string"}, "pool_strategy": {"default": null, "type": "string"}}, "type": "object"}}, "type": "object"}, "Jina::Executors::ImageReader": {"additionalProperties": false, "description": "Load image file and craft it into image matrix.\n\n    :class:`ImageReader` loads the image from the given file\n        path and save the `ndarray` of the image in the Document.\n\n    :param channel_axis: the axis id of the color channel.\n        The ``-1`` indicates the color channel info at the last axis", "properties": {"jtype": {"const": "ImageReader", "description": "Load image file and craft it into image matrix.", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"channel_axis": {"default": -1, "type": "number"}}, "type": "object"}}, "type": "object"}, "Jina::Executors::ImageResizer": {"additionalProperties": false, "description": "Resize image to the given size.\n\n    :param target_size: Desired output size.\n        If size is a sequence like (h, w), the output size will\n        be matched to this. If size is an int, the smaller edge\n        of the image will be matched to this number maintain\n        the aspect ratio.\n    :param how: The interpolation method. Valid values include\n        `NEAREST`, `BILINEAR`, `BICUBIC`, and `LANCZOS`.\n        Default is `BILINEAR`. Please refer to `PIL.Image` for details.", "properties": {"jtype": {"const": "ImageResizer", "description": "Resize image to the given size.", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"channel_axis": {"default": -1, "type": "number"}, "how": {"default": "BILINEAR", "type": "string"}, "target_size": {"default": 224}}, "type": "object"}}, "type": "object"}, "Jina::Executors::ImageTorchEncoder": {"additionalProperties": false, "description": ":class:`ImageTorchEncoder` encodes data from a ndarray, potentially B x (Channel x Height x Width) into a\n        ndarray of `B x D`.\n    Internally, :class:`ImageTorchEncoder` wraps the models from `torchvision.models`.\n    https://pytorch.org/docs/stable/torchvision/models.html", "properties": {"jtype": {"const": "ImageTorchEncoder", "description": ":class:`ImageTorchEncoder` encodes data from a ndarray, potentially B x (Channel x Height x Width) into a", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"channel_axis": {"default": 1, "type": "number"}, "model_name": {"default": "mobilenet_v2", "description": "the name of the model. Supported models include", "type": "string"}, "pool_strategy": {"default": "mean", "description": "the pooling strategy", "type": "string"}}, "type": "object"}}, "type": "object"}, "Jina::Executors::IncrementalPCAEncoder": {"additionalProperties": false, "description": ":class:`IncrementalPCAEncoder` encodes data from an ndarray in size `B x T` into an ndarray in size `B x D`.\n\n    .. note::\n        :class:`IncrementalPCAEncoder` must be trained before calling ``encode()``. This encoder can be trained in an\n        incremental way.", "properties": {"jtype": {"const": "IncrementalPCAEncoder", "description": ":class:`IncrementalPCAEncoder` encodes data from an ndarray in size `B x T` into an ndarray in size `B x D`.", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"model_path": {"default": null, "description": "path from where to pickle the sklearn model.", "type": "string"}, "num_features": {"default": null, "description": "the number of input features.  If ``num_features`` is None, then ``num_features`` is", "type": "number"}, "output_dim": {"default": 64, "type": "number"}, "random_state": {"default": 2020, "type": "number"}, "whiten": {"default": false, "description": "If whiten is false, the data is already considered to be whitened, and no whitening is performed.", "type": "boolean"}}, "type": "object"}}, "type": "object"}, "Jina::Executors::InfiniteNormEvaluator": {"additionalProperties": false, "description": "A :class:`InfiniteNormEvaluator` evaluates the distance between actual and desired embeddings computing\n    the Infinite Norm between them", "properties": {"jtype": {"const": "InfiniteNormEvaluator", "description": "A :class:`InfiniteNormEvaluator` evaluates the distance between actual and desired embeddings computing", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {}, "type": "object"}}, "type": "object"}, "Jina::Executors::JaccardSimilarityEvaluator": {"additionalProperties": false, "description": "A:class:`JaccardSimilarityEvaluator` Gives the Jaccard similarity between result and groundtruth string..", "properties": {"jtype": {"const": "JaccardSimilarityEvaluator", "description": "A:class:`JaccardSimilarityEvaluator` Gives the Jaccard similarity between result and groundtruth string..", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {}, "type": "object"}}, "type": "object"}, "Jina::Executors::JiebaSegmenter": {"additionalProperties": false, "description": ":class:`JiebaSegmenter` split the chinese text\n     on the doc-level into words on the chunk-level with `jieba`.\n     :param mode: Jieba mode. The default mode is 'accurate'\n     Options are:\n     - accurate\n     - search\n     - all\n\n    :type mode: str\n    :raises:\n        ValueError: If `mode` is not any of the expected modes\n    :param args:  Additional positional arguments\n    :param kwargs: Additional keyword arguments", "properties": {"jtype": {"const": "JiebaSegmenter", "description": ":class:`JiebaSegmenter` split the chinese text", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"mode": {"default": "accurate", "type": "string"}}, "type": "object"}}, "type": "object"}, "Jina::Executors::L1NormEvaluator": {"additionalProperties": false, "description": "A :class:`L1NormEvaluator` evaluates the distance between actual and desired embeddings computing\n    the L1 Norm between them", "properties": {"jtype": {"const": "L1NormEvaluator", "description": "A :class:`L1NormEvaluator` evaluates the distance between actual and desired embeddings computing", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {}, "type": "object"}}, "type": "object"}, "Jina::Executors::LaserEncoder": {"additionalProperties": false, "description": "Encode an array of string in size `B` into an ndarray in size `B x D`\n\n    The ndarray potentially is BatchSize x (Channel x Height x Width)\n\n    :class:`LaserEncoder` is a encoder based on Facebook Research's LASER\n    (Language-Agnostic SEntence Representations) to compute multilingual\n    sentence embeddings: https://github.com/facebookresearch/LASER\n    :param path_to_bpe_codes: path to bpe codes from Laser.\n        Defaults to Laser.DEFAULT_BPE_CODES_FILE.\n    :param path_to_bpe_vocab: path to bpe vocabs from Laser.\n        Defaults to Laser.DEFAULT_BPE_VOCAB_FILE.\n    :param path_to_encoder: path to the encoder from Laser.\n        Defaults to Laser.DEFAULT_ENCODER_FILE.\n    :param language: language of the text. Defaults to english(en).\n    :param args:  Additional positional arguments\n    :param kwargs: Additional keyword arguments", "properties": {"jtype": {"const": "LaserEncoder", "description": "Encode an array of string in size `B` into an ndarray in size `B x D`", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"language": {"default": "en", "type": "string"}, "path_to_bpe_codes": {"default": null, "type": "string"}, "path_to_bpe_vocab": {"default": null, "type": "string"}, "path_to_encoder": {"default": null, "type": "string"}}, "type": "object"}}, "type": "object"}, "Jina::Executors::LevelDBIndexer": {"additionalProperties": false, "description": ":class:`LevelDBIndexer` use `LevelDB` to save and query protobuf document.", "properties": {"jtype": {"const": "LevelDBIndexer", "description": ":class:`LevelDBIndexer` use `LevelDB` to save and query protobuf document.", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"index_filename": {"default": null, "description": "the name of the file for storing the index, when not given metas.name is used.", "type": "string"}, "key_length": {"default": 36, "type": "number"}}, "type": "object"}}, "type": "object"}, "Jina::Executors::LevenshteinRanker": {"additionalProperties": false, "description": ":class:`LevenshteinRanker` Computes the negative Levenshtein distance\n        between a query and its matches. The distance is negative, in order to\n        achieve a bigger=better result, sort in the respective driver.", "properties": {"jtype": {"const": "LevenshteinRanker", "description": ":class:`LevenshteinRanker` Computes the negative Levenshtein distance", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"match_required_keys": {"default": null, "description": "Set of keys or features to be extracted from match `Document` by the `Driver` so that"}, "query_required_keys": {"default": null, "description": "Set of keys or features to be extracted from query `Document` by the `Driver` so that"}}, "type": "object"}}, "type": "object"}, "Jina::Executors::MFCCTimbreEncoder": {"additionalProperties": false, "description": "Extract a `n_mfcc`-dimensional feature vector for each MFCC frame.\n\n    :class:`MFCCTimbreEncoder` is based on Mel-Frequency Cepstral\n        Coefficients (MFCCs) which represent timbral features.\n    :class:`MFCCTimbreEncoder` encodes an audio signal from a\n        `Batch x Signal Length` ndarray into a\n        `Batch x Concatenated Features` ndarray.\n\n    :param input_sample_rate: input sampling rate in Hz\n        (22050 by default)\n    :param n_mfcc: the number of coefficients\n        (20 by default)\n    :param n_fft: length of the FFT window\n        (2048 by default)\n    :param hop_length: the number of samples between\n        successive MFCC frames (512 by default)", "properties": {"jtype": {"const": "MFCCTimbreEncoder", "description": "Extract a `n_mfcc`-dimensional feature vector for each MFCC frame.", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"hop_length": {"default": 512, "type": "number"}, "input_sample_rate": {"default": 22050, "type": "number"}, "n_fft_length": {"default": 2048, "type": "number"}, "n_mfcc": {"default": 20, "type": "number"}}, "type": "object"}}, "type": "object"}, "Jina::Executors::Match2DocRanker": {"additionalProperties": false, "description": "Re-scores the matches for a document. This Ranker is only responsible for\n    calculating new scores and not for the actual sorting. The sorting is handled\n    in the respective ``Matches2DocRankDriver``.\n\n    Possible implementations:\n        - ReverseRanker (reverse scores of all matches)\n        - BucketShuffleRanker (first buckets matches and then sort each bucket).", "properties": {"jtype": {"const": "Match2DocRanker", "description": "Re-scores the matches for a document. This Ranker is only responsible for", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"match_required_keys": {"default": null, "description": "Set of keys or features to be extracted from match `Document` by the `Driver` so that"}, "query_required_keys": {"default": null, "description": "Set of keys or features to be extracted from query `Document` by the `Driver` so that"}}, "type": "object"}}, "type": "object"}, "Jina::Executors::MilvusIndexer": {"additionalProperties": false, "description": "Milvus powered vector indexer\n\n        For more information about Milvus:\n            - https://github.com/milvus-io/milvus/", "properties": {"jtype": {"const": "MilvusIndexer", "description": "Milvus powered vector indexer", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"collection_name": {"default": "default", "type": "string"}, "host": {"default": "0.0.0.0", "type": "string"}, "index_filename": {"default": null, "description": "the name of the file for storing the index, when not given metas.name is used.", "type": "string"}, "index_params": {"default": null}, "index_type": {"default": "IVF,Flat", "type": "string"}, "key_length": {"default": 36, "type": "number"}, "port": {"default": 19530, "type": "number"}}, "type": "object"}}, "type": "object"}, "Jina::Executors::MinkowskiDistanceEvaluator": {"additionalProperties": false, "description": "A :class:`MinkowskiDistanceEvaluator` evaluates the distance between actual and desired \n    embeddings computing the Minkowski distance ( p>0 ) between them, which can be considered \n    as a generalization of both the Euclidean distance and the Manhattan distance.\n\n        D(x, y) = ( sum_i |x_i - y_i|^p )^(1/p)", "properties": {"jtype": {"const": "MinkowskiDistanceEvaluator", "description": "A :class:`MinkowskiDistanceEvaluator` evaluates the distance between actual and desired ", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"order": {"default": 1}}, "type": "object"}}, "type": "object"}, "Jina::Executors::MongoDBIndexer": {"additionalProperties": false, "description": ":class:`MongoDBIndexer` MongoDB based KV Indexer.", "properties": {"jtype": {"const": "MongoDBIndexer", "description": ":class:`MongoDBIndexer` MongoDB based KV Indexer.", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"collection": {"default": "defaultcol", "description": "the collection name", "type": "string"}, "database": {"default": "defaultdb", "description": "the database name", "type": "string"}, "hostname": {"default": "127.0.0.1", "description": "hostname of the machine", "type": "string"}, "index_filename": {"default": null, "description": "the name of the file for storing the index, when not given metas.name is used.", "type": "string"}, "key_length": {"default": 36, "type": "number"}, "password": {"default": null, "description": "the password to authenticate", "type": "string"}, "port": {"default": 27017, "description": "the port", "type": "number"}, "username": {"default": null, "description": "the username to authenticate", "type": "string"}}, "type": "object"}}, "type": "object"}, "Jina::Executors::NDCGEvaluator": {"additionalProperties": false, "description": "From a list of sorted retrieved sorted scores and expected scores, evaluates normalized discounted cumulative gain for information retrieval.\n    :param eval_at: The number of documents in each of the lists to consider in the NDCG computation. If None. the complete lists are considered\n        for the evaluation computation\n    :param power_relevance: The power relevance places stronger emphasis on retrieving relevant documents.\n        For detailed information, please check https://en.wikipedia.org/wiki/Discounted_cumulative_gain\n    :param is_relevance_value: boolean indicating if the actual scores are to be considered relevance, meaning highest value is better.\n        If True, the information coming from the actual system results will be sorted in descending order, otherwise in ascending order.\n        Since the `input` of the `evaluate` method is sorted according to the `scores` of both actual and desired input, this parameter is\n        useful for instance when the `matches` come directly from a `VectorIndexer` where score is `distance` and therefore the `smaller` the `better`.\n\n    .. note:\n        All the IDs that are not found in the groundtruth will be considered to have relevance 0.", "properties": {"jtype": {"const": "NDCGEvaluator", "description": "From a list of sorted retrieved sorted scores and expected scores, evaluates normalized discounted cumulative gain for information retrieval.", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"eval_at": {"default": null, "type": "number"}, "is_relevance_score": {"default": true, "type": "boolean"}, "power_relevance": {"default": true, "type": "boolean"}}, "type": "object"}}, "type": "object"}, "Jina::Executors::NGTIndexer": {"additionalProperties": false, "description": "NGT powered vector indexer\n\n    For more information about the NGT supported parameters and installation problems, please consult:\n        - https://github.com/yahoojapan/NGT\n\n    .. note::\n        NGT package dependency is only required at the query time.\n        Quick Install : pip install ngt", "properties": {"jtype": {"const": "NGTIndexer", "description": "NGT powered vector indexer", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"compress_level": {"default": 1, "description": "The compresslevel argument is an integer from 0 to 9 controlling the", "type": "number"}, "epsilon": {"default": 0.1, "description": "Toggle this variable for speed vs recall tradeoff.", "type": "number"}, "index_filename": {"default": null, "description": "the name of the file for storing the index, when not given metas.name is used.", "type": "string"}, "key_length": {"default": 36, "type": "number"}, "metric": {"default": "L2", "description": "Should be one of {L1,L2,Hamming,Jaccard,Angle,Normalized Angle,Cosine,Normalized Cosine}", "type": "string"}, "num_threads": {"default": 2, "description": "Number of threads to build index", "type": "number"}, "ref_indexer": {"default": null, "description": "Bootstrap the current indexer from a ``ref_indexer``. This enables user to switch"}}, "type": "object"}}, "type": "object"}, "Jina::Executors::NmsLibIndexer": {"additionalProperties": false, "description": "", "properties": {"jtype": {"const": "NmsLibIndexer", "description": "", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"compress_level": {"default": 1, "description": "The compresslevel argument is an integer from 0 to 9 controlling the", "type": "number"}, "index_filename": {"default": null, "description": "the name of the file for storing the index, when not given metas.name is used.", "type": "string"}, "index_params": {"default": {"post": 2}, "description": "Dictionary of optional parameters to use in indexing"}, "key_length": {"default": 36, "type": "number"}, "method": {"default": "hnsw", "description": "The index method to use", "type": "string"}, "num_threads": {"default": 1, "description": "The number of threads to use", "type": "number"}, "print_progress": {"default": false, "description": "Whether or not to display progress bar when creating index", "type": "boolean"}, "ref_indexer": {"default": null, "description": "Bootstrap the current indexer from a ``ref_indexer``. This enables user to switch"}, "space": {"default": "cosinesimil", "description": "The metric space to create for this index", "type": "string"}}, "type": "object"}}, "type": "object"}, "Jina::Executors::NumpyIndexer": {"additionalProperties": false, "description": "An exhaustive vector indexers implemented with numpy and scipy.", "properties": {"jtype": {"const": "NumpyIndexer", "description": "An exhaustive vector indexers implemented with numpy and scipy.", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"backend": {"default": "numpy", "description": "`numpy` or `scipy`, `numpy` only supports `euclidean` and `cosine` distance", "type": "string"}, "compress_level": {"default": 1, "description": "The compresslevel argument is an integer from 0 to 9 controlling the", "type": "number"}, "index_filename": {"default": null, "description": "the name of the file for storing the index, when not given metas.name is used.", "type": "string"}, "key_length": {"default": 36, "type": "number"}, "metric": {"default": "cosine", "description": "The distance metric to use. `braycurtis`, `canberra`, `chebyshev`, `cityblock`, `correlation`,", "type": "string"}, "ref_indexer": {"default": null, "description": "Bootstrap the current indexer from a ``ref_indexer``. This enables user to switch"}}, "type": "object"}}, "type": "object"}, "Jina::Executors::OneHotTextEncoder": {"additionalProperties": false, "description": "Encode the characters into one-hot vectors.\n\n    ONLY FOR TESTING USAGES.\n\n    :param on_value: the default value for the locations\n        represented by characters\n    :param off_value: the default value for the locations\n        not represented by characters", "properties": {"jtype": {"const": "OneHotTextEncoder", "description": "Encode the characters into one-hot vectors.", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"off_value": {"default": 0, "type": "number"}, "on_value": {"default": 1, "type": "number"}}, "type": "object"}}, "type": "object"}, "Jina::Executors::PDFExtractorSegmenter": {"additionalProperties": false, "description": ":class:`PDFExtractorSegmenter` Extracts data (text and images) from PDF files.", "properties": {"jtype": {"const": "PDFExtractorSegmenter", "description": ":class:`PDFExtractorSegmenter` Extracts data (text and images) from PDF files.", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {}, "type": "object"}}, "type": "object"}, "Jina::Executors::PrecisionEvaluator": {"additionalProperties": false, "description": "A :class:`PrecisionEvaluator` evaluates the Precision of the search.\n       It computes how many of the first given `eval_at` matches are found in the groundtruth", "properties": {"jtype": {"const": "PrecisionEvaluator", "description": "A :class:`PrecisionEvaluator` evaluates the Precision of the search.", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"eval_at": {"default": null, "description": "the point at which evaluation is computed, if None give, will consider all the input to evaluate", "type": "number"}}, "type": "object"}}, "type": "object"}, "Jina::Executors::RandomGaussianEncoder": {"additionalProperties": false, "description": ":class:`RandomGaussianEncoder` encodes data from an ndarray in size `B x T` into an ndarray in size `B x D`\n    https://scikit-learn.org/stable/modules/generated/sklearn.random_projection.GaussianRandomProjection.html", "properties": {"jtype": {"const": "RandomGaussianEncoder", "description": ":class:`RandomGaussianEncoder` encodes data from an ndarray in size `B x T` into an ndarray in size `B x D`", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"model_path": {"default": null, "description": "path from where to pickle the sklearn model.", "type": "string"}, "output_dim": {"default": 64, "type": "number"}, "random_state": {"default": 2020, "type": "number"}}, "type": "object"}}, "type": "object"}, "Jina::Executors::RandomImageCropper": {"additionalProperties": false, "description": ":class:`RandomImageCropper` crops the image with a random crop box.\n    The coordinate is the same coordinate-system that the :py:mode:`PIL.Image`.\n\n    :param target_size: desired output size. If size is a sequence like (h, w), the output size will be matched to\n        this. If size is an int, the output will have the same height and width as the `target_size`.\n    :param num_patches: The number of crops to be done\n    :param channel_axis: Axis for channel\n    :param args:  Additional positional arguments\n    :param kwargs: Additional keyword arguments", "properties": {"jtype": {"const": "RandomImageCropper", "description": ":class:`RandomImageCropper` crops the image with a random crop box.", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"channel_axis": {"default": -1, "type": "number"}, "num_patches": {"default": 1, "type": "number"}, "target_size": {"default": 224}}, "type": "object"}}, "type": "object"}, "Jina::Executors::RandomSparseEncoder": {"additionalProperties": false, "description": ":class:`RandomSparseEncoder` encodes data from an ndarray in size `B x T` into an ndarray in size `B x D`\n    https://scikit-learn.org/stable/modules/generated/sklearn.random_projection.SparseRandomProjection.html", "properties": {"jtype": {"const": "RandomSparseEncoder", "description": ":class:`RandomSparseEncoder` encodes data from an ndarray in size `B x T` into an ndarray in size `B x D`", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"model_path": {"default": null, "description": "path from where to pickle the sklearn model.", "type": "string"}, "output_dim": {"default": 64, "type": "number"}, "random_state": {"default": 2020, "type": "number"}}, "type": "object"}}, "type": "object"}, "Jina::Executors::RecallEvaluator": {"additionalProperties": false, "description": "A :class:`RecallEvaluator` evaluates the Precision of the search.\n       It computes how many of the first given `eval_at` groundtruth are found in the matches", "properties": {"jtype": {"const": "RecallEvaluator", "description": "A :class:`RecallEvaluator` evaluates the Precision of the search.", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"eval_at": {"default": null, "description": "the point at which evaluation is computed, if None give, will consider all the input to evaluate", "type": "number"}}, "type": "object"}}, "type": "object"}, "Jina::Executors::ReciprocalRankEvaluator": {"additionalProperties": false, "description": ":class:`ReciprocalRankEvaluator` Gives score as per reciprocal rank metric.", "properties": {"jtype": {"const": "ReciprocalRankEvaluator", "description": ":class:`ReciprocalRankEvaluator` Gives score as per reciprocal rank metric.", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {}, "type": "object"}}, "type": "object"}, "Jina::Executors::RedisDBIndexer": {"additionalProperties": false, "description": ":class:`RedisDBIndexer` Use Redis as a key-value indexer.", "properties": {"jtype": {"const": "RedisDBIndexer", "description": ":class:`RedisDBIndexer` Use Redis as a key-value indexer.", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"db": {"default": 0, "type": "number"}, "hostname": {"default": "0.0.0.0", "type": "string"}, "index_filename": {"default": null, "description": "the name of the file for storing the index, when not given metas.name is used.", "type": "string"}, "key_length": {"default": 36, "type": "number"}, "port": {"default": 6379, "type": "number"}}, "type": "object"}}, "type": "object"}, "Jina::Executors::RougeEvaluator": {"additionalProperties": false, "description": ":class:`RougeEvaluator` Evaluate Rouge score between acutal and ground truth.", "properties": {"jtype": {"const": "RougeEvaluator", "description": ":class:`RougeEvaluator` Evaluate Rouge score between acutal and ground truth.", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"metric": {"default": "rouge-1", "type": "string"}, "stat": {"default": "r", "type": "string"}}, "type": "object"}}, "type": "object"}, "Jina::Executors::ScannIndexer": {"additionalProperties": false, "description": "Scann powered vector indexer\n\n    For more information about the Scann supported parameters, please consult:\n        - https://github.com/google-research/google-research/tree/master/scann\n\n    .. note::\n        Scann package dependency is only required at the query time.", "properties": {"jtype": {"const": "ScannIndexer", "description": "Scann powered vector indexer", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"anisotropic_quantization_threshold": {"default": 0.2, "description": "See https://arxiv.org/abs/1908.10396 for", "type": "number"}, "compress_level": {"default": 1, "description": "The compresslevel argument is an integer from 0 to 9 controlling the", "type": "number"}, "dimensions_per_block": {"default": 2, "description": "Recommended for AH is 2", "type": "number"}, "distance_measure": {"default": "dot_product", "description": "The distance measurement used between the query and the points.", "type": "string"}, "index_filename": {"default": null, "description": "the name of the file for storing the index, when not given metas.name is used.", "type": "string"}, "key_length": {"default": 36, "type": "number"}, "num_leaves": {"default": 2000, "description": "It should be roughly the square root of the number of datapoints.", "type": "number"}, "num_leaves_to_search": {"default": 100, "description": "The amount of leaves to search.", "type": "number"}, "ref_indexer": {"default": null, "description": "Bootstrap the current indexer from a ``ref_indexer``. This enables user to switch"}, "reordering_num_neighbors": {"default": 100, "description": "Should be higher than the final number of neighbors", "type": "number"}, "scoring": {"default": "score_ah", "description": "It can be score_ah (asymmetric hashing) or score_bf (brute force).", "type": "string"}, "training_iterations": {"default": 10, "description": "Number of iterations per training. Default is 10", "type": "number"}, "training_sample_size": {"default": 250000, "description": "The size of the training sample.", "type": "number"}}, "type": "object"}}, "type": "object"}, "Jina::Executors::Sentencizer": {"additionalProperties": false, "description": ":class:`Sentencizer` split the text on the doc-level\n    into sentences on the chunk-level with a rule-base strategy.\n    The text is split by the punctuation characters listed in ``punct_chars``.\n    The sentences that are shorter than the ``min_sent_len``\n    or longer than the ``max_sent_len`` after stripping will be discarded.\n\n    :param min_sent_len: the minimal number of characters,\n        (including white spaces) of the sentence, by default 1.\n    :param max_sent_len: the maximal number of characters,\n        (including white spaces) of the sentence, by default 512.\n    :param punct_chars: the punctuation characters to split on,\n        whatever is in the list will be used,\n        for example ['!', '.', '?'] will use '!', '.' and '?'\n    :param uniform_weight: the definition of it should have\n        uniform weight or should be calculated\n    :param args:  Additional positional arguments\n    :param kwargs: Additional keyword arguments", "properties": {"jtype": {"const": "Sentencizer", "description": ":class:`Sentencizer` split the text on the doc-level", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"max_sent_len": {"default": 512, "type": "number"}, "min_sent_len": {"default": 1, "type": "number"}, "punct_chars": {"default": null}, "uniform_weight": {"default": true, "type": "boolean"}}, "type": "object"}}, "type": "object"}, "Jina::Executors::SimpleAggregateRanker": {"additionalProperties": false, "description": ":class:`SimpleAggregateRanker` aggregates the score\n    of the matched doc from the matched chunks.\n    For each matched doc, the score is aggregated\n    from all the matched chunks belonging to that doc.\n\n    :param: aggregate_function: defines the used aggregate function\n        and can be one of: [min, max, mean, median, sum, prod]\n    :param: inverse_score: plus-one inverse by 1/(1+score)\n    :raises:\n        ValueError: If `aggregate_function` is not any of the expected types\n    :param args:  Additional positional arguments\n    :param kwargs: Additional keyword arguments", "properties": {"jtype": {"const": "SimpleAggregateRanker", "description": ":class:`SimpleAggregateRanker` aggregates the score", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"aggregate_function": {"default": null, "type": "string"}, "inverse_score": {"default": false, "type": "boolean"}, "match_required_keys": {"default": null, "description": "Set of keys or features to be extracted from match `Document` by the `Driver` so that"}, "query_required_keys": {"default": null, "description": "Set of keys or features to be extracted from query `Document` by the `Driver` so that"}}, "type": "object"}}, "type": "object"}, "Jina::Executors::SlidingWindowAudioSlicer": {"additionalProperties": false, "description": ":class:`SlidingWindowAudioSlicer` segments the audio signal on the doc-level\n    into frames on the chunk-level with a sliding window.\n\n    :param frame_length: the number of samples in each frame\n    :param frame_overlap_length: the number of samples\n        each frame overlaps with its previous frame\n    :param args:  Additional positional arguments\n    :param kwargs: Additional keyword arguments", "properties": {"jtype": {"const": "SlidingWindowAudioSlicer", "description": ":class:`SlidingWindowAudioSlicer` segments the audio signal on the doc-level", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"frame_length": {"default": 2048, "type": "number"}, "frame_overlap_length": {"default": 1536, "type": "number"}}, "type": "object"}}, "type": "object"}, "Jina::Executors::SlidingWindowImageCropper": {"additionalProperties": false, "description": ":class:`SlidingWindowImageCropper` crops the image with a sliding window.\n\n    :param target_size: desired output size. If size is a sequence like (h, w),\n        the output size will be matched to this.\n        If size is an int, the output will have the\n        same height and width as the `target_size`.\n    :param strides: the strides between two neighboring sliding windows.\n        `strides` is a sequence like (h, w),\n        in which denote the strides on the vertical\n        and the horizontal axis.\n    :param padding: If False, only patches which are\n        fully contained in the input image are included.\n        If True, all patches whose starting point\n        is inside the input are included,\n        and areas outside the input default to zero.\n        The `padding` argument has no effect on the size of each patch,\n        it determines how many patches are extracted.\n        Default is False.\n    :param args:  Additional positional arguments\n    :param kwargs: Additional keyword arguments", "properties": {"jtype": {"const": "SlidingWindowImageCropper", "description": ":class:`SlidingWindowImageCropper` crops the image with a sliding window.", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"channel_axis": {"default": -1, "type": "number"}, "padding": {"default": false, "type": "boolean"}, "strides": {"default": [2, 2], "type": "array"}, "target_size": {"default": 16}}, "type": "object"}}, "type": "object"}, "Jina::Executors::SlidingWindowSegmenter": {"additionalProperties": false, "description": ":class:`SlidingWindowSegmenter` split the text on the doc-level\n    into overlapping substrings on the chunk-level.\n    The text is split into substrings of length ``window_size`` if possible.\n    The degree of overlapping can be configured through the ``step_size`` parameter.\n    The substrings that are shorter than the ``min_substring_len`` will be discarded.\n\n    :param window_size: the window size that will be used to split the text into substrings\n    :param step_size: the size of the degree of overlapping\n    :param min_substring_len: the minimum size of substrings. Anything shorter will be discarded", "properties": {"jtype": {"const": "SlidingWindowSegmenter", "description": ":class:`SlidingWindowSegmenter` split the text on the doc-level", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"min_substring_len": {"default": 1, "type": "number"}, "step_size": {"default": 150, "type": "number"}, "window_size": {"default": 300, "type": "number"}}, "type": "object"}}, "type": "object"}, "Jina::Executors::SptagIndexer": {"additionalProperties": false, "description": ":class:`SptagIndexer` SPTAG powered vector indexer.\n\n    For SPTAG installation and python API usage, please consult:\n\n        - https://github.com/microsoft/SPTAG/blob/master/Dockerfile\n        - https://github.com/microsoft/SPTAG/blob/master/docs/Tutorial.ipynb\n        - https://github.com/microsoft/SPTAG\n        - https://github.com/microsoft/SPTAG/blob/master/docs/Parameters.md\n\n    .. note::\n        sptag package dependency is only required at the query time.", "properties": {"jtype": {"const": "SptagIndexer", "description": ":class:`SptagIndexer` SPTAG powered vector indexer.", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"bkt_meansk": {"default": 32, "description": "how many childs each tree node has (only used if method is BKT)", "type": "number"}, "bkt_number": {"default": 1, "description": "number of BKT trees (only used if method is BKT)", "type": "number"}, "cef": {"default": 100, "description": "number of results used to construct RNG", "type": "number"}, "compress_level": {"default": 1, "description": "The compresslevel argument is an integer from 0 to 9 controlling the", "type": "number"}, "dist_calc_method": {"default": "Cosine", "description": "the distance type, currently SPTAG only support Cosine and L2 distances.", "type": "string"}, "graph_neighborhood_size": {"default": 2, "description": "number of neighborhood size scale in the build stage", "type": "number"}, "index_filename": {"default": null, "description": "the name of the file for storing the index, when not given metas.name is used.", "type": "string"}, "kdt_number": {"default": 1, "description": "number of KDT trees (only used if method is BKT)", "type": "number"}, "key_length": {"default": 36, "type": "number"}, "max_check": {"default": 8192, "description": "how many nodes will be visited for a query in the search stage", "type": "number"}, "max_check_for_refined_graph": {"default": 10000, "description": "how many nodes each node will visit during graph refine in the build stage", "type": "number"}, "method": {"default": "BKT", "description": "The index method to use, index Algorithm type (e.g. BKT, KDT), required.", "type": "string"}, "neighborhood_size": {"default": 32, "description": "number of neighbors each node has in the neighborhood graph", "type": "number"}, "num_threads": {"default": 1, "description": "The number of threads to use", "type": "number"}, "ref_indexer": {"default": null, "description": "Bootstrap the current indexer from a ``ref_indexer``. This enables user to switch"}, "samples": {"default": 1000, "description": "how many points will be sampled to do tree node split", "type": "number"}, "tpt_leaf_size": {"default": 2000, "description": "TPT tree leaf size", "type": "number"}, "tpt_number": {"default": 32, "description": "number of TPT trees to help with graph construction", "type": "number"}}, "type": "object"}}, "type": "object"}, "Jina::Executors::TSNEEncoder": {"additionalProperties": false, "description": ":class:`TSNEEncoder` encodes data from an ndarray in size `B x T` into an ndarray in size `B x D`.\n    https://scikit-learn.org/stable/modules/generated/sklearn.manifold.TSNE.html\n    TSNE does not inherit Transform encoder because it can't have a transform without fit.", "properties": {"jtype": {"const": "TSNEEncoder", "description": ":class:`TSNEEncoder` encodes data from an ndarray in size `B x T` into an ndarray in size `B x D`.", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"output_dim": {"default": 64, "type": "number"}, "random_state": {"default": 2020, "type": "number"}}, "type": "object"}}, "type": "object"}, "Jina::Executors::TextLengthEvaluator": {"additionalProperties": false, "description": "A :class:`TextLengthEvaluator` evaluates the different lengths between actual and desired text", "properties": {"jtype": {"const": "TextLengthEvaluator", "description": "A :class:`TextLengthEvaluator` evaluates the different lengths between actual and desired text", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {}, "type": "object"}}, "type": "object"}, "Jina::Executors::TextPaddlehubEncoder": {"additionalProperties": false, "description": "Encode an array of string in size `B` into an ndarray in size `B x D`\n\n    The ndarray potentially is BatchSize x (Channel x Height x Width)\n\n    Internally, :class:`TextPaddlehubEncoder` wraps the Ernie module from paddlehub.\n    https://github.com/PaddlePaddle/PaddleHub\n    For models' details refer to\n    https://www.paddlepaddle.org.cn/hublist?filter=en_category&value=SemanticModel\n\n    :param model_name: the name of the model. Supported models include\n        ``ernie``, ``ernie_tiny``, ``ernie_v2_eng_base``, ``ernie_v2_eng_large``,\n        ``bert_chinese_L-12_H-768_A-12``, ``bert_multi_cased_L-12_H-768_A-12``,\n        ``bert_multi_uncased_L-12_H-768_A-12``, ``bert_uncased_L-12_H-768_A-12``,\n        ``bert_uncased_L-24_H-1024_A-16``, ``chinese-bert-wwm``,\n        ``chinese-bert-wwm-ext``, ``chinese-electra-base``,\n        ``chinese-electra-small``, ``chinese-roberta-wwm-ext``,\n        ``chinese-roberta-wwm-ext-large``, ``rbt3``, ``rbtl3``\n    :param args:  Additional positional arguments\n    :param kwargs: Additional keyword arguments", "properties": {"jtype": {"const": "TextPaddlehubEncoder", "description": "Encode an array of string in size `B` into an ndarray in size `B x D`", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"model_name": {"default": null, "type": "string"}}, "type": "object"}}, "type": "object"}, "Jina::Executors::TfIdfRanker": {"additionalProperties": false, "description": ":class:`TfIdfRanker` calculates the weighted score from the matched chunks.\n        The weights of each chunk is based on the tf-idf algorithm.\n        Each query chunk is considered as a ``term``,\n        and the frequency of the query chunk in a\n        specific matched document is considered as the naive ``term-frequency``.\n        All the matched results as a whole is\n        considered as the corpus, and therefore the frequency of the query\n        chunk in all the matched docs is considered\n        as the naive ``document-frequency``.\n        Please refer to the functions for the details of calculating\n        ``tf`` and ``idf``.\n\n    :param threshold: the threshold of matching scores.\n        Only the matched chunks with a score that is higher or equal\n        to the ``threshold`` are counted as matched.\n    :param args:  Additional positional arguments\n    :param kwargs: Additional keyword arguments", "properties": {"jtype": {"const": "TfIdfRanker", "description": ":class:`TfIdfRanker` calculates the weighted score from the matched chunks.", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"match_required_keys": {"default": null, "description": "Set of keys or features to be extracted from match `Document` by the `Driver` so that"}, "query_required_keys": {"default": null, "description": "Set of keys or features to be extracted from query `Document` by the `Driver` so that"}, "threshold": {"default": 0.1}}, "type": "object"}}, "type": "object"}, "Jina::Executors::TikaExtractor": {"additionalProperties": false, "description": ":class:`TikaExtractor` Extracts text from files.\n\n    :param tika_ocr_strategy: Type of ocr strategy. It can be:\n        1. ``no_ocr``: Extract text only. Don't run OCR\n        2. ``ocr_only``: Run OCR only. Don't extract text\n        3. ``ocr_and_text``: Extract text and run OCR\n\n    :param tika_extract_inline_images: Extract inline images or not\n    :param tika_ocr_language: The language model. English by default\n    :param tika_request_timeout: Timeout for server request\n    :param args:  Additional positional arguments\n    :param kwargs: Additional keyword arguments", "properties": {"jtype": {"const": "TikaExtractor", "description": ":class:`TikaExtractor` Extracts text from files.", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"tika_extract_inline_images": {"default": "true", "type": "string"}, "tika_ocr_language": {"default": "eng", "type": "string"}, "tika_ocr_strategy": {"default": "ocr_only", "type": "string"}, "tika_request_timeout": {"default": 600, "type": "number"}}, "type": "object"}}, "type": "object"}, "Jina::Executors::TirgImageEncoder": {"additionalProperties": false, "description": "Encode BatchSize x (Channel x Height x Width) ndarray into BatchSize * d ndarray.\n\n    :class:`TirgImageEncoder` is originally proposed in the paper *Composing Text and Image for Image Retrieval - An Empirical Odyssey*.\n    It can been used for multimodal image retrieval purpose.\n\n    :param model_path: the directory of the TIRG model.\n    :param texts_path: the pickled training text of the TIRG model.\n    :param channel_axis: The axis of the channel, default -1, will move the axis of input data from -1 to 1.\n    :param args: additional positional arguments.\n    :param kwargs: additional positional arguments.", "properties": {"jtype": {"const": "TirgImageEncoder", "description": "Encode BatchSize x (Channel x Height x Width) ndarray into BatchSize * d ndarray.", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"channel_axis": {"default": -1, "type": "number"}, "model_path": {"default": "checkpoint.pth", "type": "string"}, "texts_path": {"default": "texts.pkl", "type": "string"}}, "type": "object"}}, "type": "object"}, "Jina::Executors::TirgMultiModalEncoder": {"additionalProperties": false, "description": "", "properties": {"jtype": {"const": "TirgMultiModalEncoder", "description": "", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"channel_axis": {"default": -1, "type": "number"}, "model_path": {"default": "checkpoint.pth", "description": "the path where the model is stored.", "type": "string"}, "positional_modality": {"default": null, "description": "the list of arguments indicating in which order the modalities they need to come"}, "texts_path": {"default": "texts.pkl", "type": "string"}}, "type": "object"}}, "type": "object"}, "Jina::Executors::TorchObjectDetectionSegmenter": {"additionalProperties": false, "description": ":class:`TorchObjectDetectionSegmenter` detects objects\n    from an image using `torchvision detection models`\n    and crops the images according tothe detected bounding boxes\n    of the objects with a confidence higher than a threshold.\n\n    :param model_name: the name of the model. Supported models include\n        ``fasterrcnn_resnet50_fpn``, ``maskrcnn_resnet50_fpn`\n    :param channel_axis: the axis id of the color channel,\n        ``-1`` indicates the color channel info at the last axis\n    :param confidence_threshold: confidence value from which it\n        considers a positive detection and therefore the object detected will be cropped and returned\n    :param label_name_map: A Dict mapping from label index to label name, by default will be\n        COCO_INSTANCE_CATEGORY_NAMES\n    :param args:  Additional positional arguments\n    :param kwargs: Additional keyword arguments\n        TODO: Allow changing the backbone", "properties": {"jtype": {"const": "TorchObjectDetectionSegmenter", "description": ":class:`TorchObjectDetectionSegmenter` detects objects", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"channel_axis": {"default": 0, "type": "number"}, "confidence_threshold": {"default": 0.0, "type": "number"}, "label_name_map": {"default": null, "type": "object"}, "model_name": {"default": null, "type": "string"}}, "type": "object"}}, "type": "object"}, "Jina::Executors::TransformEncoder": {"additionalProperties": false, "description": ":class:`TransformEncoder` encodes data from an ndarray in size `B x T` into an ndarray in size `B x D`", "properties": {"jtype": {"const": "TransformEncoder", "description": ":class:`TransformEncoder` encodes data from an ndarray in size `B x T` into an ndarray in size `B x D`", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"model_path": {"default": null, "description": "path from where to pickle the sklearn model.", "type": "string"}, "output_dim": {"default": 64, "type": "number"}, "random_state": {"default": 2020, "type": "number"}}, "type": "object"}}, "type": "object"}, "Jina::Executors::TransformerTFEncoder": {"additionalProperties": false, "description": "Internally wraps the tensorflow-version of transformers from huggingface.\n\n    :param pretrained_model_name_or_path: Either:\n        - a string, the `model id` of a pretrained model hosted inside a\n            model repo on huggingface.co, e.g.: ``bert-base-uncased``.\n        - a path to a `directory` containing model weights saved using\n            :func:`~transformers.PreTrainedModel.save_pretrained`, e.g.:\n            ``./my_model_directory/``.\n    :param base_tokenizer_model: The name of the base model to use for\n        creating the tokenizer. If None, will be equal to\n        `pretrained_model_name_or_path`.\n    :param pooling_strategy: the strategy to merge the word embeddings\n        into the chunk embedding. Supported strategies include\n        'cls', 'mean', 'max', 'min'.\n    :param layer_index: index of the transformer layer that is used to\n        create encodings. Layer 0 corresponds to the embeddings layer\n    :param max_length: the max length to truncate the tokenized sequences to.\n    :param args:  Additional positional arguments\n    :param kwargs: Additional keyword arguments", "properties": {"jtype": {"const": "TransformerTFEncoder", "description": "Internally wraps the tensorflow-version of transformers from huggingface.", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"base_tokenizer_model": {"default": null, "type": "string"}, "layer_index": {"default": -1, "type": "number"}, "max_length": {"default": null, "type": "number"}, "pooling_strategy": {"default": "mean", "type": "string"}, "pretrained_model_name_or_path": {"default": "distilbert-base-uncased", "type": "string"}}, "type": "object"}}, "type": "object"}, "Jina::Executors::TransformerTorchEncoder": {"additionalProperties": false, "description": "Wraps the pytorch version of transformers from huggingface.\n\n    :param pretrained_model_name_or_path: Either:\n        - a string, the `model id` of a pretrained model hosted\n            inside a model repo on huggingface.co, e.g.: ``bert-base-uncased``.\n        - a path to a `directory` containing model weights saved using\n            :func:`~transformers.PreTrainedModel.save_pretrained`, e.g.:\n            ``./my_model_directory/``.\n    :param base_tokenizer_model: The name of the base model to use for creating\n        the tokenizer. If None, will be equal to `pretrained_model_name_or_path`.\n    :param pooling_strategy: the strategy to merge the word embeddings into the\n        chunk embedding. Supported strategies include 'cls', 'mean', 'max', 'min'.\n    :param layer_index: index of the transformer layer that is used to create\n        encodings. Layer 0 corresponds to the embeddings layer\n    :param max_length: the max length to truncate the tokenized sequences to.\n    :acceleration: The method to accelerate encoding. The available options are:\n        - ``'amp'``, which uses `automatic mixed precision\n            `<https://pytorch.org/docs/stable/amp.html>`_ autocasting.\n            This option is only available on GPUs that support it\n            (architecture newer than or equal to NVIDIA Volatire).\n        - ``'quant'``, which uses dynamic quantization on the transformer model.\n            See `this tutorial\n            <https://pytorch.org/tutorials/intermediate/dynamic_quantization_bert_tutorial.html>`_\n            for more information. This option is currently not supported on GPUs.\n    :param args:  Additional positional arguments\n    :param kwargs: Additional keyword arguments\n\n    ..note::\n        While acceleration methods can significantly speed up the encoding, they result in loss of precision.\n        Make sure that the tradeoff is worthwhile for your use case.", "properties": {"jtype": {"const": "TransformerTorchEncoder", "description": "Wraps the pytorch version of transformers from huggingface.", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"acceleration": {"default": null, "type": "string"}, "base_tokenizer_model": {"default": null, "type": "string"}, "layer_index": {"default": -1, "type": "number"}, "max_length": {"default": null, "type": "number"}, "pooling_strategy": {"default": "mean", "type": "string"}, "pretrained_model_name_or_path": {"default": "sentence-transformers/distilbert-base-nli-stsb-mean-tokens", "type": "string"}}, "type": "object"}}, "type": "object"}, "Jina::Executors::UniquePbIndexer": {"additionalProperties": false, "description": "A frequently used pattern for combining a :class:`BaseKVIndexer` and a :class:`DocCache`", "properties": {"jtype": {"const": "UniquePbIndexer", "description": "A frequently used pattern for combining a :class:`BaseKVIndexer` and a :class:`DocCache`", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"resolve_all": {"default": true, "description": "universally add ``*_all()`` to all functions that have the identical name", "type": "boolean"}, "routes": {"default": null, "description": "a map of function routes. The key is the function name, the value is a tuple of two pieces,", "type": "object"}}, "type": "object"}}, "type": "object"}, "Jina::Executors::UniqueVectorIndexer": {"additionalProperties": false, "description": "A frequently used pattern for combining a :class:`BaseVectorIndexer` and a :class:`DocCache`", "properties": {"jtype": {"const": "UniqueVectorIndexer", "description": "A frequently used pattern for combining a :class:`BaseVectorIndexer` and a :class:`DocCache`", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"resolve_all": {"default": true, "description": "universally add ``*_all()`` to all functions that have the identical name", "type": "boolean"}, "routes": {"default": null, "description": "a map of function routes. The key is the function name, the value is a tuple of two pieces,", "type": "object"}}, "type": "object"}}, "type": "object"}, "Jina::Executors::UniversalSentenceEncoder": {"additionalProperties": false, "description": "Encode an 1d array of string in size `B` into an ndarray in size `B x D`\n\n    The ndarray potentially is BatchSize x (Channel x Height x Width)\n\n    :class:`UniversalSentenceEncoder` is a encoder based on the Universal Sentence\n    Encoder family (https://tfhub.dev/google/collections/universal-sentence-encoder/1).\n\n    :param model_url: the url of the model (TensorFlow Hub).\n        For supported models see family overview:\n        https://tfhub.dev/google/collections/universal-sentence-encoder/1)\n    :param args:  Additional positional arguments\n    :param kwargs: Additional keyword arguments", "properties": {"jtype": {"const": "UniversalSentenceEncoder", "description": "Encode an 1d array of string in size `B` into an ndarray in size `B x D`", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"model_url": {"default": "https://tfhub.dev/google/universal-sentence-encoder/4", "type": "string"}}, "type": "object"}}, "type": "object"}, "Jina::Executors::VSEImageEncoder": {"additionalProperties": false, "description": ":class:`VSEImageEncoder` encodes data from a ndarray, potentially BatchSize x (Channel x Height x Width) into a\n        ndarray of BatchSize * d.\n\n    The :clas:`VSEImageEncoder` was originally proposed in `VSE++: Improving Visual-Semantic Embeddings with Hard Negatives <https://github.com/fartashf/vsepp>`_.\n\n    :param path: The VSE model path.\n    :param pool_strategy: Pooling strategy for the encoder, default `mean`.\n    :param channel_axis: The axis of the channel, default -1, will move the axis of input data from -1 to 1.\n    :param args: additional positional arguments.\n    :param kwargs: additional positional arguments.", "properties": {"jtype": {"const": "VSEImageEncoder", "description": ":class:`VSEImageEncoder` encodes data from a ndarray, potentially BatchSize x (Channel x Height x Width) into a", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"channel_axis": {"default": 1, "type": "number"}, "path": {"default": "runs/f30k_vse++_vggfull/model_best.pth.tar", "type": "string"}, "pool_strategy": {"default": "mean", "type": "string"}}, "type": "object"}}, "type": "object"}, "Jina::Executors::VSETextEncoder": {"additionalProperties": false, "description": "Encode an 1d array of string in size `B` into an ndarray in size `B x D`\n\n    The ndarray potentially is BatchSize x (Channel x Height x Width)\n\n    Using VSE text_emb branch\n\n    :path : path where to find the model.pth file\n    :vocab_path : path where to find the vocab.pkl file\n    :param args:  Additional positional arguments\n    :param kwargs: Additional keyword arguments", "properties": {"jtype": {"const": "VSETextEncoder", "description": "Encode an 1d array of string in size `B` into an ndarray in size `B x D`", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"path": {"default": "runs/f30k_vse++_vggfull/model_best.pth.tar", "type": "string"}, "vocab_path": {"default": "vocab/f30k_vocab.pkl", "type": "string"}}, "type": "object"}}, "type": "object"}, "Jina::Executors::VideoPaddleEncoder": {"additionalProperties": false, "description": "Encode data from a ndarray, using the models from `paddlehub`.\n\n    Encodes data from a ndarray, potentially B x T x\n    (Channel x Height x Width) into andarray of `B x D`.\n    Internally, :class:`VideoPaddleEncoder` wraps the models from `paddlehub`.\n    https://github.com/PaddlePaddle/PaddleHub\n\n    param model_name: the name of the model. Supported models include\n        ``tsn_kinetics400``, ``stnet_kinetics400``, ``tsm_kinetics400``\n    :param output_feature: the name of the layer for feature extraction.\n        Please use the following values for the supported models:\n            ``tsn_kinetics400``: `@HUB_tsn_kinetics400@reduce_mean_0.tmp_0`\n            ``stnet_kinetics400``: ``@HUB_stnet_kinetics400@reshape2_6.tmp_0``\n            ``tsm_kinetics400``: ``@HUB_tsm_kinetics400@reduce_mean_0.tmp_0``\n\n    :param pool_strategy: the pooling strategy\n        - `None` means that the output of the model will be the output feature.\n        - `mean` means that global average pooling will be applied to the output\n            feature, and thus the output of the model will be a 2D tensor.\n        - `max` means that global max pooling will be applied.\n    :param args:  Additional positional arguments\n    :param kwargs: Additional keyword arguments", "properties": {"jtype": {"const": "VideoPaddleEncoder", "description": "Encode data from a ndarray, using the models from `paddlehub`.", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"channel_axis": {"default": 2, "type": "number"}, "model_name": {"default": "tsn_kinetics400", "type": "string"}, "output_feature": {"default": "@HUB_tsn_kinetics400@reduce_mean_0.tmp_0", "type": "string"}, "pool_strategy": {"default": null, "type": "string"}}, "type": "object"}}, "type": "object"}, "Jina::Executors::VideoTorchEncoder": {"additionalProperties": false, "description": "Encode data from a ndarray, using the models from `torchvision.models`.\n\n    :class:`VideoTorchEncoder` encodes data from a ndarray, potentially\n    B x T x (Channel x Height x Width) into an ndarray of `B x D`.\n    Internally, :class:`VideoTorchEncoder` wraps the models from\n    `torchvision.models`: https://pytorch.org/docs/stable/torchvision/models.html\n\n    :param model_name: the name of the model.\n        Supported models include ``r3d_18``, ``mc3_18``, ``r2plus1d_18``\n        Default is ``r3d_18``.\n    :param pool_strategy: the pooling strategy\n        - `None` means that the output of the model will be the 4D tensor\n            output of the last convolutional block.\n        - `mean` means that global average pooling will be applied to the\n            output of the last convolutional block, and thus the output\n            of the model will be a 2D tensor.\n        - `max` means that global max pooling will be applied.", "properties": {"jtype": {"const": "VideoTorchEncoder", "description": "Encode data from a ndarray, using the models from `torchvision.models`.", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"channel_axis": {"default": 1, "type": "number"}, "model_name": {"default": "r3d_18", "type": "string"}, "pool_strategy": {"default": "mean", "type": "string"}}, "type": "object"}}, "type": "object"}, "Jina::Executors::Wav2VecSpeechEncoder": {"additionalProperties": false, "description": "Use a pre-trained model (`wav2vec`) to encode audio signal.\n\n    :class:`Wav2VecSpeechEncoder` is a speech encoder based on `wav2vec`,\n        an unsupervised pre-trained model for speech recognition presented and implemented\n        by Facebook: https://github.com/pytorch/fairseq/tree/master/examples/wav2vec\n        It uses a pre-trained model to encode an audio signal from\n        a `Batch x Signal Length` ndarray into a `Batch x Concatenated Features` ndarray,\n        and produces a representation for each time step at a rate of 100 Hz.\n\n    :param model_path: the path of the pre-trained model.\n        The pre-trained model can be downloaded at\n        https://github.com/pytorch/fairseq/tree/master/examples/wav2vec/README.md#wav2vec\n    :param input_sample_rate: input sampling rate in Hz (22050 by default)", "properties": {"jtype": {"const": "Wav2VecSpeechEncoder", "description": "Use a pre-trained model (`wav2vec`) to encode audio signal.", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"input_sample_rate": {"default": 22050, "type": "number"}, "model_path": {"default": "/tmp/wav2vec_large.pt", "type": "string"}}, "type": "object"}}, "type": "object"}, "Jina::Executors::ZarrIndexer": {"additionalProperties": false, "description": "Indexing based on Zarr arrays.\n\n    For more information about Zarr, please check\n    https://zarr.readthedocs.io/en/stable/index.html", "properties": {"jtype": {"const": "ZarrIndexer", "description": "Indexing based on Zarr arrays.", "type": "string"}, "metas": {"$ref": "#/definitions/Jina::Metas"}, "requests": {"$ref": "#/definitions/Jina::Requests"}, "with": {"additionalProperties": false, "description": "The arguments of this Jina Executor/Driver", "properties": {"backend": {"default": "numpy", "description": "`numpy` or `scipy`, `numpy` only supports `euclidean` and `cosine` distance", "type": "string"}, "compress_level": {"default": 1, "description": "The compresslevel argument is an integer from 0 to 9 controlling the", "type": "number"}, "index_filename": {"default": null, "description": "the name of the file for storing the index, when not given metas.name is used.", "type": "string"}, "key_length": {"default": 36, "type": "number"}, "metric": {"default": "cosine", "description": "The distance metric to use. `braycurtis`, `canberra`, `chebyshev`, `cityblock`, `correlation`,", "type": "string"}, "ref_indexer": {"default": null, "description": "Bootstrap the current indexer from a ``ref_indexer``. This enables user to switch"}}, "type": "object"}}, "type": "object"}, "Jina::Flow": {"additionalProperties": false, "properties": {"description": {"default": null, "description": "The description of this object. It will be used in automatics docs UI.", "type": "string"}, "inspect": {"default": "COLLECT", "description": "The strategy on those inspect pods in the flow.\n\nIf `REMOVE` is given then all inspect pods are removed when building the flow.", "enum": ["HANG", "REMOVE", "COLLECT"], "type": "string"}, "jtype": {"default": "Flow", "description": "The type of Jina object (Flow, Executor, Driver).\nA Flow is made up of several sub-tasks, and it manages the states and context of these sub-tasks.\nThe input and output data of Flows are Documents.", "enum": ["Flow", "AsyncFlow"], "type": "string"}, "log_config": {"default": "/opt/hostedtoolcache/Python/3.7.10/x64/lib/python3.7/site-packages/jina/resources/logging.default.yml", "description": "The YAML config of the logger used in this object.", "type": "string"}, "name": {"default": null, "description": "The name of this object.\n\nThis will be used in the following places:\n- how you refer to this object in Python/YAML/CLI\n- visualization\n- log message header\n- automatics docs UI\n- ...\n\nWhen not given, then the default naming strategy will apply.", "type": "string"}, "pods": {"description": "Define the steps in the Flow.\nA Pod is a container and interface for one or multiple Peas that have the same properties.", "items": {"$ref": "#/definitions/Jina::Pod"}, "minItems": 1, "type": "array"}, "quiet": {"default": false, "description": "If set, then no log will be emitted from this object.", "type": "boolean"}, "quiet_error": {"default": false, "description": "If set, then exception stack information will not be added to the log", "type": "boolean"}, "uses": {"default": null, "description": "The YAML file represents a flow", "type": "string"}, "version": {"default": "'1'", "description": "The YAML version of this Flow.", "type": "string"}}, "required": ["jtype", "version", "pods"], "type": "object"}, "Jina::Metas": {"additionalProperties": false, "description": "The meta config of the Executor", "properties": {"batch_size": {"default": null, "description": "The size of each batch, methods decorated by `@batching` will respect this. Useful when incoming data is too large to fit into (GPU) memory.", "type": "number"}, "description": {"default": null, "description": "The description of this executor. It will be used in automatics docs UI", "type": "string"}, "is_trained": {"default": false, "description": "Indicates if the executor is trained or not. If not, then methods decorated by `@required_train` can not be executed.", "type": "boolean"}, "is_updated": {"default": false, "description": "Indicates if the executor is updated or changed since last save. If not, then save() will do nothing. A forced save is possible to use `touch()` before `save()`", "type": "boolean"}, "name": {"default": null, "description": "The name of the executor.", "type": "string"}, "on_gpu": {"default": false, "description": "If the executor is set to run on GPU.", "type": "boolean"}, "py_modules": {"default": null, "description": "\nThe external python module paths. it is useful when you want to load external python modules\nusing :func:`BaseExecutor.load_config` from a YAML file. If a relative path is given then the root path is set to\nthe path of the current YAML file.\n\nExample of ``py_module`` usage:\n\n1. This is a valid structure and it is RECOMMENDED:\n    - \"my_cust_module\" is a python module\n    - all core logic of your customized executor goes to ``__init__.py``\n    - to import ``foo.py``, you can use relative import, e.g. ``from .foo import bar``\n    - ``helper.py`` needs to be put BEFORE `__init__.py` in YAML ``py_modules``\n\nThis is also the structure given by ``jina hub new`` CLI.\n\n    .. highlight:: text\n    .. code-block:: text\n\n         my_cust_module\n           |- __init__.py\n           |- helper.py\n           |- config.yml\n                |- py_modules\n                       |- helper.py\n                       |- __init__.py\n\n2. This is a valid structure but not recommended:\n    - \"my_cust_module\" is not a python module (lack of __init__.py under the root)\n    - to import ``foo.py``, you must to use ``from jinahub.foo import bar``\n    - ``jinahub`` is a common namespace for all plugin-modules, not changeable.\n    - ``helper.py`` needs to be put BEFORE `my_cust.py` in YAML ``py_modules``\n\n    .. highlight:: text\n    .. code-block:: text\n\n         my_cust_module\n           |- my_cust.py\n           |- helper.py\n           |- config.yml\n                |- py_modules\n                       |- helper.py\n                       |- my_cust.py                \n                ", "items": {"minItems": 1, "type": "string", "uniqueItems": true}, "type": "array"}, "read_only": {"default": false, "description": "Do not allow the Pod to modify the Executor, save calls will be ignored. If set to true no serialization of the Executor", "type": "boolean"}, "workspace": {"default": null, "description": "\nThe working directory, for persisting the artifacts of the executor. An artifact is a file or collection of files used during a workflow run.\n\nBy default it is not set, if you expect your executor to be persisted or to persist any data, remember to set it to the desired value.\n\nWhen a BaseExecutor is a component of a `CompoundExecutor`, its workspace value will be overriden by the workspace coming from the `CompoundExecutor` unless a particular workspace value is set for the component BaseExecutor.                \n                ", "type": "string"}}, "required": [], "type": "object"}, "Jina::Pod": {"additionalProperties": false, "items": {"minItems": 1, "type": "string", "uniqueItems": true}, "properties": {"ctrl_with_ipc": {"default": false, "description": "If set, use ipc protocol for control socket", "type": "boolean"}, "daemon": {"default": false, "description": "The Pea attempts to terminate all of its Runtime child processes/threads on existing. setting it to true basically tell the Pea do not wait on the Runtime when closing", "type": "boolean"}, "description": {"default": null, "description": "The description of this object. It will be used in automatics docs UI.", "type": "string"}, "docker_kwargs": {"default": null, "description": "Dictionary of kwargs arguments that will be passed to Docker SDK when starting the docker '\ncontainer. \n\nMore details can be found in the Docker SDK docs:  https://docker-py.readthedocs.io/en/stable/", "type": "object"}, "dump_interval": {"default": 240, "description": "Serialize the model in the pod every n seconds if model changes. -1 means --read-only.", "type": "number"}, "entrypoint": {"default": null, "description": "The entrypoint command overrides the ENTRYPOINT in Docker image. when not set then the Docker image ENTRYPOINT takes effective.", "type": "string"}, "env": {"default": null, "description": "The map of environment variables that are available inside runtime", "type": "object"}, "expose_public": {"default": false, "description": "If set, expose the public IP address to remote when necessary, by default it exposesprivate IP address, which only allows accessing under the same network/subnet. Important to set this to true when the Pea will receive input connections from remote Peas", "type": "boolean"}, "host": {"default": "0.0.0.0", "description": "The host address of the runtime, by default it is 0.0.0.0.", "type": "string"}, "host_in": {"default": "0.0.0.0", "description": "The host address for input, by default it is 0.0.0.0", "type": "string"}, "host_out": {"default": "0.0.0.0", "description": "The host address for output, by default it is 0.0.0.0", "type": "string"}, "log_config": {"default": "/opt/hostedtoolcache/Python/3.7.10/x64/lib/python3.7/site-packages/jina/resources/logging.default.yml", "description": "The YAML config of the logger used in this object.", "type": "string"}, "memory_hwm": {"default": -1, "description": "The memory high watermark of this pod in Gigabytes, pod will restart when this is reached. -1 means no restriction", "type": "number"}, "method": {"default": "add", "description": "The method to use when appending the Pod to the Flow", "enum": ["add", "needs", "inspect", "needs_all", "gather_inspect"], "type": "string"}, "name": {"default": null, "description": "The name of this object.\n\nThis will be used in the following places:\n- how you refer to this object in Python/YAML/CLI\n- visualization\n- log message header\n- automatics docs UI\n- ...\n\nWhen not given, then the default naming strategy will apply.", "type": "string"}, "needs": {"description": "The name of the Pod(s) that this Pod receives data from. One can also use `gateway` to indicate the connection with the gateway.\nThis is useful to create parallelization. By default the Flow always works sequentially following the defined order of the Pods.", "items": {"minItems": 1, "type": "string", "uniqueItems": true}, "type": ["array", "string"]}, "on_error_strategy": {"default": "IGNORE", "description": "The skip strategy on exceptions.\n\n- IGNORE: Ignore it, keep running all Drivers & Executors logics in the sequel flow\n- SKIP_EXECUTOR: Skip all Executors in the sequel, but drivers are still called\n- SKIP_HANDLE: Skip all Drivers & Executors in the sequel, only `pre_hook` and `post_hook` are called\n- THROW_EARLY: Immediately throw the exception, the sequel flow will not be running at all \n                    \nNote, `IGNORE`, `SKIP_EXECUTOR` and `SKIP_HANDLE` do not guarantee the success execution in the sequel flow. If something \nis wrong in the upstream, it is hard to carry this exception and moving forward without any side-effect.", "enum": ["IGNORE", "SKIP_EXECUTOR", "SKIP_HANDLE", "THROW_EARLY"], "type": "string"}, "parallel": {"default": 1, "description": "The number of parallel peas in the pod running at the same time, `port_in` and `port_out` will be set to random, and routers will be added automatically when necessary", "type": "number"}, "polling": {"default": "ANY", "description": "The polling strategy of the Pod (when `parallel>1`) \n- ANY: only one (whoever is idle) Pea polls the message\n- ALL: all Peas poll the message (like a broadcast)", "enum": ["ANY", "ALL", "ALL_ASYNC"], "type": "string"}, "port_ctrl": {"default": 41619, "description": "The port for controlling the runtime, default a random port between [49152, 65535]", "type": "number"}, "port_expose": {"default": 56885, "description": "The port of the host exposed to the public", "type": "number"}, "port_in": {"default": 53581, "description": "The port for input data, default a random port between [49152, 65535]", "type": "number"}, "port_out": {"default": 51277, "description": "The port for output data, default a random port between [49152, 65535]", "type": "number"}, "pull_latest": {"default": false, "description": "Pull the latest image before running", "type": "boolean"}, "py_modules": {"default": null, "description": "The customized python modules need to be imported before loading the executor\n\nNote, when importing multiple files and there is a dependency between them, then one has to write the dependencies in \nreverse order. That is, if `__init__.py` depends on `A.py`, which again depends on `B.py`, then you need to write: \n\n--py-modules __init__.py --py-modules B.py --py-modules A.py", "type": "array"}, "quiet": {"default": false, "description": "If set, then no log will be emitted from this object.", "type": "boolean"}, "quiet_error": {"default": false, "description": "If set, then exception stack information will not be added to the log", "type": "boolean"}, "read_only": {"default": false, "description": "If set, do not allow the pod to modify the model, dump_interval will be ignored", "type": "boolean"}, "runtime_backend": {"default": "PROCESS", "description": "The parallel backend of the runtime inside the Pea", "enum": ["THREAD", "PROCESS"], "type": "string"}, "runtime_cls": {"default": "ZEDRuntime", "description": "The runtime class to run inside the Pea", "enum": ["GRPCRuntime", "RESTRuntime", "ContainerRuntime", "JinadRuntime", "SSHRuntime", "ZEDRuntime"], "type": "string"}, "scheduling": {"default": "LOAD_BALANCE", "description": "The strategy of scheduling workload among Peas", "enum": ["LOAD_BALANCE", "ROUND_ROBIN"], "type": "string"}, "silent_remote_logs": {"default": false, "description": "Do not display the streaming of remote logs on local console", "type": "boolean"}, "socket_in": {"default": "PULL_BIND", "description": "The socket type for input port", "enum": ["PULL_BIND", "PULL_CONNECT", "PUSH_BIND", "PUSH_CONNECT", "SUB_BIND", "SUB_CONNECT", "PUB_BIND", "PUB_CONNECT", "PAIR_BIND", "PAIR_CONNECT", "ROUTER_BIND", "DEALER_CONNECT"], "type": "string"}, "socket_out": {"default": "PUSH_BIND", "description": "The socket type for output port", "enum": ["PULL_BIND", "PULL_CONNECT", "PUSH_BIND", "PUSH_CONNECT", "SUB_BIND", "SUB_CONNECT", "PUB_BIND", "PUB_CONNECT", "PAIR_BIND", "PAIR_CONNECT", "ROUTER_BIND", "DEALER_CONNECT"], "type": "string"}, "ssh_keyfile": {"default": null, "description": "This specifies a key to be used in ssh login, default None. regular default ssh keys will be used without specifying this argument.", "type": "string"}, "ssh_password": {"default": null, "description": "The ssh password to the ssh server.", "type": "string"}, "ssh_server": {"default": null, "description": "The SSH server through which the tunnel will be created, can actually be a fully specified `user@server:port` ssh url.", "type": "string"}, "timeout_ctrl": {"default": 5000, "description": "The timeout in milliseconds of the control request, -1 for waiting forever", "type": "number"}, "timeout_ready": {"default": 60000, "description": "The timeout in milliseconds of a Pea waits for the runtime to be ready, -1 for waiting forever", "type": "number"}, "upload_files": {"default": null, "description": "The files on the host to be uploaded to the remote\nworkspace. This can be useful when your Pod has more\nfile dependencies beyond a single YAML file, e.g.\nPython files, data files.\n\nNote,\n- currently only flatten structure is supported, which means if you upload `[./foo/a.py, ./foo/b.pp, ./bar/c.yml]`, then they will be put under the _same_ workspace on the remote, losing all hierarchies.\n- by default, `--uses` YAML file is always uploaded.\n- uploaded files are by default isolated across the runs. To ensure files are submitted to the same workspace across different runs, use `--workspace-id` to specify the workspace.", "type": "array"}, "uses": {"default": "_pass", "description": "The config of the executor, it could be one of the followings: \n- an Executor-level YAML file path (*.yml/yaml) \n- a name of a class inherited from `jina.Executor`\n- a docker image (must start with `docker://`)\n- builtin executors, e.g. `_pass`, `_logforward`, `_merge` \n- the string literal of a YAML config (must start with `!`)\n- the string literal of a JSON config\n- the string literal of a YAML driver config (must start with `- !!`)\n\nWhen use it under Python, one can use the following values additionally:\n- a Python dict that represents the config\n- a text file stream has `.read()` interface", "type": "string"}, "uses_after": {"default": null, "description": "The executor attached after the Peas described by --uses, typically used for receiving from all parallels, accepted type follows `--uses`", "type": "string"}, "uses_before": {"default": null, "description": "The executor attached after the Peas described by --uses, typically before sending to all parallels, accepted type follows `--uses`", "type": "string"}, "uses_internal": {"default": "BaseExecutor", "description": "The config runs inside the Docker container. \n\nSyntax and function are the same as `--uses`. This is designed when `--uses=\"docker://...\"` this config is passed to \nthe Docker container.", "type": "string"}, "volumes": {"default": null, "description": "The path on the host to be mounted inside the container. \n\nNote, \n- If separated by `:`, then the first part will be considered as the local host path and the second part is the path in the container system. \n- If no split provided, then the basename of that directory will be mounted into container's root path, e.g. `--volumes=\"/user/test/my-workspace\"` will be mounted into `/my-workspace` inside the container. \n- All volumes are mounted with read-write mode.", "type": "array"}, "workspace_id": {"default": "fd34a471-71a3-436f-a77f-7b0c6dfe2145", "description": "the UUID for identifying the workspace. When not given a random id will be assigned.Multiple Pea/Pod/Flow will work under the same workspace if they share the same `workspace-id`.", "type": "string"}}, "required": [], "type": "object"}, "Jina::Requests": {"additionalProperties": false, "description": "Define how the Executor behaves under network requests.", "properties": {"on": {"additionalProperties": false, "description": "Defines how the `Executor` behaves under different types of request", "properties": {"ControlRequest": {"additionalProperties": false, "description": "Defines how the `Executor` behaves under Control request.", "properties": {"drivers": {"$ref": "#/definitions/Jina::Drivers::All"}, "with": {"description": "The common kwargs that all drivers defined under this Request.", "type": "object"}}, "type": "object"}, "DeleteRequest": {"additionalProperties": false, "description": "Defines how the `Executor` behaves under Delete request.", "properties": {"drivers": {"$ref": "#/definitions/Jina::Drivers::All"}, "with": {"description": "The common kwargs that all drivers defined under this Request.", "type": "object"}}, "type": "object"}, "IndexRequest": {"additionalProperties": false, "description": "Defines how the `Executor` behaves under Index request.", "properties": {"drivers": {"$ref": "#/definitions/Jina::Drivers::All"}, "with": {"description": "The common kwargs that all drivers defined under this Request.", "type": "object"}}, "type": "object"}, "SearchRequest": {"additionalProperties": false, "description": "Defines how the `Executor` behaves under Search request.", "properties": {"drivers": {"$ref": "#/definitions/Jina::Drivers::All"}, "with": {"description": "The common kwargs that all drivers defined under this Request.", "type": "object"}}, "type": "object"}, "TrainRequest": {"additionalProperties": false, "description": "Defines how the `Executor` behaves under Train request.", "properties": {"drivers": {"$ref": "#/definitions/Jina::Drivers::All"}, "with": {"description": "The common kwargs that all drivers defined under this Request.", "type": "object"}}, "type": "object"}, "UpdateRequest": {"additionalProperties": false, "description": "Defines how the `Executor` behaves under Update request.", "properties": {"drivers": {"$ref": "#/definitions/Jina::Drivers::All"}, "with": {"description": "The common kwargs that all drivers defined under this Request.", "type": "object"}}, "type": "object"}}, "type": "object"}, "use_default": {"default": false, "description": "If set, then inherit from the default `Driver` settings for this type of Executor.", "type": "boolean"}}, "type": "object"}}, "description": "The YAML schema of Jina objects (Flow, Executor, Drivers).", "oneOf": [{"$ref": "#/definitions/Jina::Flow"}, {"$ref": "#/definitions/Jina::Executors::BaseEvaluator"}, {"$ref": "#/definitions/Jina::Executors::BaseRankingEvaluator"}, {"$ref": "#/definitions/Jina::Executors::BaseExecutor"}, {"$ref": "#/definitions/Jina::Executors::BaseIndexer"}, {"$ref": "#/definitions/Jina::Executors::BaseKVIndexer"}, {"$ref": "#/definitions/Jina::Executors::BaseVectorIndexer"}, {"$ref": "#/definitions/Jina::Executors::CompoundExecutor"}, {"$ref": "#/definitions/Jina::Executors::CompoundIndexer"}, {"$ref": "#/definitions/Jina::Executors::UniqueVectorIndexer"}, {"$ref": "#/definitions/Jina::Executors::BaseSegmenter"}, {"$ref": "#/definitions/Jina::Executors::BaseMultiModalEncoder"}, {"$ref": "#/definitions/Jina::Executors::BinaryPbIndexer"}, {"$ref": "#/definitions/Jina::Executors::DataURIPbIndexer"}, {"$ref": "#/definitions/Jina::Executors::UniquePbIndexer"}, {"$ref": "#/definitions/Jina::Executors::BaseEncoder"}, {"$ref": "#/definitions/Jina::Executors::BaseMindsporeEncoder"}, {"$ref": "#/definitions/Jina::Executors::BaseOnnxEncoder"}, {"$ref": "#/definitions/Jina::Executors::BasePaddleEncoder"}, {"$ref": "#/definitions/Jina::Executors::BaseTFEncoder"}, {"$ref": "#/definitions/Jina::Executors::BaseTorchEncoder"}, {"$ref": "#/definitions/Jina::Executors::BaseClassifier"}, {"$ref": "#/definitions/Jina::Executors::BaseCrafter"}, {"$ref": "#/definitions/Jina::Executors::BaseEmbeddingEvaluator"}, {"$ref": "#/definitions/Jina::Executors::CosineEvaluator"}, {"$ref": "#/definitions/Jina::Executors::BaseCache"}, {"$ref": "#/definitions/Jina::Executors::DocCache"}, {"$ref": "#/definitions/Jina::Executors::BaseRanker"}, {"$ref": "#/definitions/Jina::Executors::Chunk2DocRanker"}, {"$ref": "#/definitions/Jina::Executors::Match2DocRanker"}, {"$ref": "#/definitions/Jina::Executors::EuclideanEvaluator"}, {"$ref": "#/definitions/Jina::Executors::BaseNumericEncoder"}, {"$ref": "#/definitions/Jina::Executors::TransformEncoder"}, {"$ref": "#/definitions/Jina::Executors::RecallEvaluator"}, {"$ref": "#/definitions/Jina::Executors::FileBasedEvaluator"}, {"$ref": "#/definitions/Jina::Executors::BaseNumpyIndexer"}, {"$ref": "#/definitions/Jina::Executors::NumpyIndexer"}, {"$ref": "#/definitions/Jina::Executors::BaseAudioEncoder"}, {"$ref": "#/definitions/Jina::Executors::BaseImageEncoder"}, {"$ref": "#/definitions/Jina::Executors::BaseTextEncoder"}, {"$ref": "#/definitions/Jina::Executors::BaseVideoEncoder"}, {"$ref": "#/definitions/Jina::Executors::BaseTextEvaluator"}, {"$ref": "#/definitions/Jina::Executors::TextLengthEvaluator"}, {"$ref": "#/definitions/Jina::Executors::PrecisionEvaluator"}, {"$ref": "#/definitions/Jina::Executors::CenterImageCropper"}, {"$ref": "#/definitions/Jina::Executors::CustomKerasImageEncoder"}, {"$ref": "#/definitions/Jina::Executors::ChromaPitchEncoder"}, {"$ref": "#/definitions/Jina::Executors::UniversalSentenceEncoder"}, {"$ref": "#/definitions/Jina::Executors::AveragePrecisionEvaluator"}, {"$ref": "#/definitions/Jina::Executors::IncrementalPCAEncoder"}, {"$ref": "#/definitions/Jina::Executors::ImageResizer"}, {"$ref": "#/definitions/Jina::Executors::LevelDBIndexer"}, {"$ref": "#/definitions/Jina::Executors::AudioMonophoner"}, {"$ref": "#/definitions/Jina::Executors::ImageOnnxEncoder"}, {"$ref": "#/definitions/Jina::Executors::AnnoyIndexer"}, {"$ref": "#/definitions/Jina::Executors::Wav2VecSpeechEncoder"}, {"$ref": "#/definitions/Jina::Executors::Sentencizer"}, {"$ref": "#/definitions/Jina::Executors::L1NormEvaluator"}, {"$ref": "#/definitions/Jina::Executors::TorchObjectDetectionSegmenter"}, {"$ref": "#/definitions/Jina::Executors::SlidingWindowAudioSlicer"}, {"$ref": "#/definitions/Jina::Executors::PDFExtractorSegmenter"}, {"$ref": "#/definitions/Jina::Executors::TirgImageEncoder"}, {"$ref": "#/definitions/Jina::Executors::BigTransferEncoder"}, {"$ref": "#/definitions/Jina::Executors::BleuEvaluator"}, {"$ref": "#/definitions/Jina::Executors::RedisDBIndexer"}, {"$ref": "#/definitions/Jina::Executors::DeepSegmenter"}, {"$ref": "#/definitions/Jina::Executors::ImageTorchEncoder"}, {"$ref": "#/definitions/Jina::Executors::ImageNormalizer"}, {"$ref": "#/definitions/Jina::Executors::SptagIndexer"}, {"$ref": "#/definitions/Jina::Executors::ImageFlipper"}, {"$ref": "#/definitions/Jina::Executors::HammingDistanceEvaluator"}, {"$ref": "#/definitions/Jina::Executors::JiebaSegmenter"}, {"$ref": "#/definitions/Jina::Executors::JaccardSimilarityEvaluator"}, {"$ref": "#/definitions/Jina::Executors::ArrayStringReader"}, {"$ref": "#/definitions/Jina::Executors::VSEImageEncoder"}, {"$ref": "#/definitions/Jina::Executors::FastICAEncoder"}, {"$ref": "#/definitions/Jina::Executors::SlidingWindowSegmenter"}, {"$ref": "#/definitions/Jina::Executors::FScoreEvaluator"}, {"$ref": "#/definitions/Jina::Executors::NGTIndexer"}, {"$ref": "#/definitions/Jina::Executors::ScannIndexer"}, {"$ref": "#/definitions/Jina::Executors::ImageReader"}, {"$ref": "#/definitions/Jina::Executors::TextPaddlehubEncoder"}, {"$ref": "#/definitions/Jina::Executors::ImagePaddlehubEncoder"}, {"$ref": "#/definitions/Jina::Executors::AlbumentationsCrafter"}, {"$ref": "#/definitions/Jina::Executors::AudioSlicer"}, {"$ref": "#/definitions/Jina::Executors::CustomImageTorchEncoder"}, {"$ref": "#/definitions/Jina::Executors::AudioNormalizer"}, {"$ref": "#/definitions/Jina::Executors::SimpleAggregateRanker"}, {"$ref": "#/definitions/Jina::Executors::VideoPaddleEncoder"}, {"$ref": "#/definitions/Jina::Executors::NDCGEvaluator"}, {"$ref": "#/definitions/Jina::Executors::MinkowskiDistanceEvaluator"}, {"$ref": "#/definitions/Jina::Executors::CompressionVaeEncoder"}, {"$ref": "#/definitions/Jina::Executors::SlidingWindowImageCropper"}, {"$ref": "#/definitions/Jina::Executors::RougeEvaluator"}, {"$ref": "#/definitions/Jina::Executors::ImageKerasEncoder"}, {"$ref": "#/definitions/Jina::Executors::FiveImageCropper"}, {"$ref": "#/definitions/Jina::Executors::TfIdfRanker"}, {"$ref": "#/definitions/Jina::Executors::MongoDBIndexer"}, {"$ref": "#/definitions/Jina::Executors::LaserEncoder"}, {"$ref": "#/definitions/Jina::Executors::TSNEEncoder"}, {"$ref": "#/definitions/Jina::Executors::RandomImageCropper"}, {"$ref": "#/definitions/Jina::Executors::GleuEvaluator"}, {"$ref": "#/definitions/Jina::Executors::MilvusIndexer"}, {"$ref": "#/definitions/Jina::Executors::InfiniteNormEvaluator"}, {"$ref": "#/definitions/Jina::Executors::RandomGaussianEncoder"}, {"$ref": "#/definitions/Jina::Executors::ReciprocalRankEvaluator"}, {"$ref": "#/definitions/Jina::Executors::BM25Ranker"}, {"$ref": "#/definitions/Jina::Executors::BiMatchRanker"}, {"$ref": "#/definitions/Jina::Executors::TikaExtractor"}, {"$ref": "#/definitions/Jina::Executors::FlairTextEncoder"}, {"$ref": "#/definitions/Jina::Executors::FeatureAgglomerationEncoder"}, {"$ref": "#/definitions/Jina::Executors::FarmTextEncoder"}, {"$ref": "#/definitions/Jina::Executors::AudioReader"}, {"$ref": "#/definitions/Jina::Executors::TirgMultiModalEncoder"}, {"$ref": "#/definitions/Jina::Executors::OneHotTextEncoder"}, {"$ref": "#/definitions/Jina::Executors::VideoTorchEncoder"}, {"$ref": "#/definitions/Jina::Executors::EditDistanceEvaluator"}, {"$ref": "#/definitions/Jina::Executors::TransformerTFEncoder"}, {"$ref": "#/definitions/Jina::Executors::VSETextEncoder"}, {"$ref": "#/definitions/Jina::Executors::LevenshteinRanker"}, {"$ref": "#/definitions/Jina::Executors::RandomSparseEncoder"}, {"$ref": "#/definitions/Jina::Executors::MFCCTimbreEncoder"}, {"$ref": "#/definitions/Jina::Executors::FaissIndexer"}, {"$ref": "#/definitions/Jina::Executors::ZarrIndexer"}, {"$ref": "#/definitions/Jina::Executors::NmsLibIndexer"}, {"$ref": "#/definitions/Jina::Executors::ArrayBytesReader"}, {"$ref": "#/definitions/Jina::Executors::TransformerTorchEncoder"}, {"$ref": "#/definitions/Jina::Executors::ImageCropper"}], "type": "object"}